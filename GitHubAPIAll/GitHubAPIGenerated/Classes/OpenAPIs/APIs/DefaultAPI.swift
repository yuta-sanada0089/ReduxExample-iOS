//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emojisGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Emojis?,_ error: Error?) -> Void)) {
        emojisGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /emojis
     - Lists all the emojis available to use on GitHub.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Emojis> 
     */
    open class func emojisGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Emojis> {
        let path = "/emojis"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Emojis>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Events?,_ error: Error?) -> Void)) {
        eventsGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /events
     - List public events.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Events> 
     */
    open class func eventsGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Events> {
        let path = "/events"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Events>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func feedsGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Feeds?,_ error: Error?) -> Void)) {
        feedsGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /feeds
     - List Feeds. GitHub provides several timeline resources in Atom format. The Feeds API  lists all the feeds available to the authenticating user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Feeds> 
     */
    open class func feedsGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Feeds> {
        let path = "/feeds"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Feeds>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter since: (query) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsGet(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gists?,_ error: Error?) -> Void)) {
        gistsGetWithRequestBuilder(since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gists
     - List the authenticated user's gists or if called anonymously, this will return all public gists. 
     - parameter since: (query) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gists> 
     */
    open class func gistsGetWithRequestBuilder(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gists> {
        let path = "/gists"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gists>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdCommentsCommentIdDelete(_id: Int, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsIdCommentsCommentIdDeleteWithRequestBuilder(_id: _id, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /gists/{id}/comments/{commentId}
     - Delete a comment.
     - parameter _id: (path) Id of gist. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func gistsIdCommentsCommentIdDeleteWithRequestBuilder(_id: Int, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/gists/{id}/comments/{commentId}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdCommentsCommentIdGet(_id: Int, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        gistsIdCommentsCommentIdGetWithRequestBuilder(_id: _id, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gists/{id}/comments/{commentId}
     - Get a single comment.
     - parameter _id: (path) Id of gist. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Comment> 
     */
    open class func gistsIdCommentsCommentIdGetWithRequestBuilder(_id: Int, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Comment> {
        var path = "/gists/{id}/comments/{commentId}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Comment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter commentId: (path) Id of comment. 
     - parameter comment: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdCommentsCommentIdPatch(_id: Int, commentId: Int, comment: Comment, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        gistsIdCommentsCommentIdPatchWithRequestBuilder(_id: _id, commentId: commentId, comment: comment, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /gists/{id}/comments/{commentId}
     - Edit a comment.
     - parameter _id: (path) Id of gist. 
     - parameter commentId: (path) Id of comment. 
     - parameter comment: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Comment> 
     */
    open class func gistsIdCommentsCommentIdPatchWithRequestBuilder(_id: Int, commentId: Int, comment: Comment, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Comment> {
        var path = "/gists/{id}/comments/{commentId}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: comment)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Comment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdCommentsGet(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Comments?,_ error: Error?) -> Void)) {
        gistsIdCommentsGetWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gists/{id}/comments
     - List comments on a gist.
     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Comments> 
     */
    open class func gistsIdCommentsGetWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Comments> {
        var path = "/gists/{id}/comments"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Comments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdCommentsPost(_id: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        gistsIdCommentsPostWithRequestBuilder(_id: _id, commentBody: commentBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /gists/{id}/comments
     - Create a commen
     - parameter _id: (path) Id of gist. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Comment> 
     */
    open class func gistsIdCommentsPostWithRequestBuilder(_id: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Comment> {
        var path = "/gists/{id}/comments"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Comment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdDelete(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsIdDeleteWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /gists/{id}
     - Delete a gist.
     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func gistsIdDeleteWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/gists/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdForksPost(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsIdForksPostWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /gists/{id}/forks
     - Fork a gist.
     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func gistsIdForksPostWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/gists/{id}/forks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdGet(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gist?,_ error: Error?) -> Void)) {
        gistsIdGetWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gists/{id}
     - Get a single gist.
     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gist> 
     */
    open class func gistsIdGetWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gist> {
        var path = "/gists/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gist>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter patchGist: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdPatch(_id: Int, patchGist: PatchGist, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gist?,_ error: Error?) -> Void)) {
        gistsIdPatchWithRequestBuilder(_id: _id, patchGist: patchGist, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /gists/{id}
     - Edit a gist.
     - parameter _id: (path) Id of gist. 
     - parameter patchGist: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gist> 
     */
    open class func gistsIdPatchWithRequestBuilder(_id: Int, patchGist: PatchGist, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gist> {
        var path = "/gists/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchGist)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gist>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdStarDelete(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsIdStarDeleteWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /gists/{id}/star
     - Unstar a gist.
     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func gistsIdStarDeleteWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/gists/{id}/star"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdStarGet(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsIdStarGetWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /gists/{id}/star
     - Check if a gist is starred.
     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func gistsIdStarGetWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/gists/{id}/star"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsIdStarPut(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gistsIdStarPutWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /gists/{id}/star
     - Star a gist.
     - parameter _id: (path) Id of gist. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func gistsIdStarPutWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/gists/{id}/star"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter postGist: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsPost(postGist: PostGist, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gist?,_ error: Error?) -> Void)) {
        gistsPostWithRequestBuilder(postGist: postGist, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /gists
     - Create a gist.
     - parameter postGist: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gist> 
     */
    open class func gistsPostWithRequestBuilder(postGist: PostGist, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gist> {
        let path = "/gists"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postGist)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gist>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter since: (query) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsPublicGet(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gists?,_ error: Error?) -> Void)) {
        gistsPublicGetWithRequestBuilder(since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gists/public
     - List all public gists.
     - parameter since: (query) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gists> 
     */
    open class func gistsPublicGetWithRequestBuilder(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gists> {
        let path = "/gists/public"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gists>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter since: (query) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gistsStarredGet(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gists?,_ error: Error?) -> Void)) {
        gistsStarredGetWithRequestBuilder(since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gists/starred
     - List the authenticated user's starred gists.
     - parameter since: (query) Timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gists> 
     */
    open class func gistsStarredGetWithRequestBuilder(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gists> {
        let path = "/gists/starred"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gists>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gitignoreTemplatesGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gitignore?,_ error: Error?) -> Void)) {
        gitignoreTemplatesGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gitignore/templates
     - Listing available templates. List all templates available to pass as an option when creating a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gitignore> 
     */
    open class func gitignoreTemplatesGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gitignore> {
        let path = "/gitignore/templates"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gitignore>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter language: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gitignoreTemplatesLanguageGet(language: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: GitignoreLang?,_ error: Error?) -> Void)) {
        gitignoreTemplatesLanguageGetWithRequestBuilder(language: language, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /gitignore/templates/{language}
     - Get a single template.
     - parameter language: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<GitignoreLang> 
     */
    open class func gitignoreTemplatesLanguageGetWithRequestBuilder(language: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<GitignoreLang> {
        var path = "/gitignore/templates/{language}"
        let languagePreEscape = "\(language)"
        let languagePostEscape = languagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{language}", with: languagePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GitignoreLang>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_issuesGet: String {
        case assigned = "assigned"
        case created = "created"
        case mentioned = "mentioned"
        case subscribed = "subscribed"
        case all = "all"
    }

    /**
     * enum for parameter state
     */
    public enum State_issuesGet: String {
        case _open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_issuesGet: String {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_issuesGet: String {
        case asc = "asc"
        case desc = "desc"
    }

    /**

     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuesGet(filter: Filter_issuesGet, state: State_issuesGet, labels: String, sort: Sort_issuesGet, direction: Direction_issuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Issues?,_ error: Error?) -> Void)) {
        issuesGetWithRequestBuilder(filter: filter, state: state, labels: labels, sort: sort, direction: direction, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /issues
     - List issues. List all issues across all the authenticated user's visible repositories. 
     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Issues> 
     */
    open class func issuesGetWithRequestBuilder(filter: Filter_issuesGet, state: State_issuesGet, labels: String, sort: Sort_issuesGet, direction: Direction_issuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Issues> {
        let path = "/issues"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter.rawValue, 
            "state": state.rawValue, 
            "labels": labels, 
            "sort": sort.rawValue, 
            "direction": direction.rawValue, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Issues>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter state
     */
    public enum State_legacyIssuesSearchOwnerRepositoryStateKeywordGet: String {
        case _open = "open"
        case closed = "closed"
    }

    /**

     - parameter keyword: (path) The search term. 
     - parameter state: (path) Indicates the state of the issues to return. Can be either open or closed. 
     - parameter owner: (path)  
     - parameter repository: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func legacyIssuesSearchOwnerRepositoryStateKeywordGet(keyword: String, state: State_legacyIssuesSearchOwnerRepositoryStateKeywordGet, owner: String, repository: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchIssuesByKeyword?,_ error: Error?) -> Void)) {
        legacyIssuesSearchOwnerRepositoryStateKeywordGetWithRequestBuilder(keyword: keyword, state: state, owner: owner, repository: repository, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /legacy/issues/search/{owner}/{repository}/{state}/{keyword}
     - Find issues by state and keyword.
     - parameter keyword: (path) The search term. 
     - parameter state: (path) Indicates the state of the issues to return. Can be either open or closed. 
     - parameter owner: (path)  
     - parameter repository: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchIssuesByKeyword> 
     */
    open class func legacyIssuesSearchOwnerRepositoryStateKeywordGetWithRequestBuilder(keyword: String, state: State_legacyIssuesSearchOwnerRepositoryStateKeywordGet, owner: String, repository: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchIssuesByKeyword> {
        var path = "/legacy/issues/search/{owner}/{repository}/{state}/{keyword}"
        let keywordPreEscape = "\(keyword)"
        let keywordPostEscape = keywordPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyword}", with: keywordPostEscape, options: .literal, range: nil)
        let statePreEscape = "\(state.rawValue)"
        let statePostEscape = statePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{state}", with: statePostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repositoryPreEscape = "\(repository)"
        let repositoryPostEscape = repositoryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repository}", with: repositoryPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchIssuesByKeyword>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_legacyReposSearchKeywordGet: String {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_legacyReposSearchKeywordGet: String {
        case updated = "updated"
        case stars = "stars"
        case forks = "forks"
    }

    /**

     - parameter keyword: (path) The search term 
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter language: (query) Filter results by language (optional)
     - parameter startPage: (query) The page number to fetch (optional)
     - parameter sort: (query) The sort field. One of stars, forks, or updated. Default: results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func legacyReposSearchKeywordGet(keyword: String, order: Order_legacyReposSearchKeywordGet? = nil, language: String? = nil, startPage: String? = nil, sort: Sort_legacyReposSearchKeywordGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchRepositoriesByKeyword?,_ error: Error?) -> Void)) {
        legacyReposSearchKeywordGetWithRequestBuilder(keyword: keyword, order: order, language: language, startPage: startPage, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /legacy/repos/search/{keyword}
     - Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the start_page parameter.
     - parameter keyword: (path) The search term 
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter language: (query) Filter results by language (optional)
     - parameter startPage: (query) The page number to fetch (optional)
     - parameter sort: (query) The sort field. One of stars, forks, or updated. Default: results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchRepositoriesByKeyword> 
     */
    open class func legacyReposSearchKeywordGetWithRequestBuilder(keyword: String, order: Order_legacyReposSearchKeywordGet? = nil, language: String? = nil, startPage: String? = nil, sort: Sort_legacyReposSearchKeywordGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchRepositoriesByKeyword> {
        var path = "/legacy/repos/search/{keyword}"
        let keywordPreEscape = "\(keyword)"
        let keywordPostEscape = keywordPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyword}", with: keywordPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order?.rawValue, 
            "language": language, 
            "start_page": startPage, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchRepositoriesByKeyword>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter email: (path) The email address 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func legacyUserEmailEmailGet(email: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchUserByEmail?,_ error: Error?) -> Void)) {
        legacyUserEmailEmailGetWithRequestBuilder(email: email, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /legacy/user/email/{email}
     - This API call is added for compatibility reasons only.
     - parameter email: (path) The email address 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchUserByEmail> 
     */
    open class func legacyUserEmailEmailGetWithRequestBuilder(email: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchUserByEmail> {
        var path = "/legacy/user/email/{email}"
        let emailPreEscape = "\(email)"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchUserByEmail>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_legacyUserSearchKeywordGet: String {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_legacyUserSearchKeywordGet: String {
        case updated = "updated"
        case stars = "stars"
        case forks = "forks"
    }

    /**

     - parameter keyword: (path) The search term 
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter startPage: (query) The page number to fetch (optional)
     - parameter sort: (query) The sort field. One of stars, forks, or updated. Default: results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func legacyUserSearchKeywordGet(keyword: String, order: Order_legacyUserSearchKeywordGet? = nil, startPage: String? = nil, sort: Sort_legacyUserSearchKeywordGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchUsersByKeyword?,_ error: Error?) -> Void)) {
        legacyUserSearchKeywordGetWithRequestBuilder(keyword: keyword, order: order, startPage: startPage, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /legacy/user/search/{keyword}
     - Find users by keyword.
     - parameter keyword: (path) The search term 
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter startPage: (query) The page number to fetch (optional)
     - parameter sort: (query) The sort field. One of stars, forks, or updated. Default: results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchUsersByKeyword> 
     */
    open class func legacyUserSearchKeywordGetWithRequestBuilder(keyword: String, order: Order_legacyUserSearchKeywordGet? = nil, startPage: String? = nil, sort: Sort_legacyUserSearchKeywordGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchUsersByKeyword> {
        var path = "/legacy/user/search/{keyword}"
        let keywordPreEscape = "\(keyword)"
        let keywordPostEscape = keywordPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyword}", with: keywordPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order?.rawValue, 
            "start_page": startPage, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchUsersByKeyword>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter markdown: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markdownPost(markdown: Markdown, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        markdownPostWithRequestBuilder(markdown: markdown, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /markdown
     - Render an arbitrary Markdown document
     - parameter markdown: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func markdownPostWithRequestBuilder(markdown: Markdown, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        let path = "/markdown"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: markdown)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markdownRawPost(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        markdownRawPostWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /markdown/raw
     - Render a Markdown document in raw mode
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func markdownRawPostWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        let path = "/markdown/raw"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func metaGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Meta?,_ error: Error?) -> Void)) {
        metaGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /meta
     - This gives some information about GitHub.com, the service.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Meta> 
     */
    open class func metaGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Meta> {
        let path = "/meta"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Meta>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func networksOwnerRepoEventsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Events?,_ error: Error?) -> Void)) {
        networksOwnerRepoEventsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /networks/{owner}/{repo}/events
     - List public events for a network of repositories.
     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Events> 
     */
    open class func networksOwnerRepoEventsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Events> {
        var path = "/networks/{owner}/{repo}/events"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Events>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter all: (query) True to show notifications marked as read. (optional)
     - parameter participating: (query) True to show only notifications in which the user is directly participating or mentioned.  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsGet(all: Bool? = nil, participating: Bool? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Notifications?,_ error: Error?) -> Void)) {
        notificationsGetWithRequestBuilder(all: all, participating: participating, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /notifications
     - List your notifications. List all notifications for the current user, grouped by repository. 
     - parameter all: (query) True to show notifications marked as read. (optional)
     - parameter participating: (query) True to show only notifications in which the user is directly participating or mentioned.  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Notifications> 
     */
    open class func notificationsGetWithRequestBuilder(all: Bool? = nil, participating: Bool? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Notifications> {
        let path = "/notifications"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "participating": participating, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Notifications>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter notificationMarkRead: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsPut(notificationMarkRead: NotificationMarkRead, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        notificationsPutWithRequestBuilder(notificationMarkRead: notificationMarkRead, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /notifications
     - Mark as read. Marking a notification as \"read\" removes it from the default view on GitHub.com. 
     - parameter notificationMarkRead: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func notificationsPutWithRequestBuilder(notificationMarkRead: NotificationMarkRead, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        let path = "/notifications"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationMarkRead)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsThreadsIdGet(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Notifications?,_ error: Error?) -> Void)) {
        notificationsThreadsIdGetWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /notifications/threads/{id}
     - View a single thread.
     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Notifications> 
     */
    open class func notificationsThreadsIdGetWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Notifications> {
        var path = "/notifications/threads/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Notifications>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsThreadsIdPatch(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        notificationsThreadsIdPatchWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /notifications/threads/{id}
     - Mark a thread as read
     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func notificationsThreadsIdPatchWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/notifications/threads/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsThreadsIdSubscriptionDelete(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        notificationsThreadsIdSubscriptionDeleteWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /notifications/threads/{id}/subscription
     - Delete a Thread Subscription.
     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func notificationsThreadsIdSubscriptionDeleteWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/notifications/threads/{id}/subscription"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsThreadsIdSubscriptionGet(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Subscription?,_ error: Error?) -> Void)) {
        notificationsThreadsIdSubscriptionGetWithRequestBuilder(_id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /notifications/threads/{id}/subscription
     - Get a Thread Subscription.
     - parameter _id: (path) Id of thread. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Subscription> 
     */
    open class func notificationsThreadsIdSubscriptionGetWithRequestBuilder(_id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Subscription> {
        var path = "/notifications/threads/{id}/subscription"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subscription>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (path) Id of thread. 
     - parameter putSubscription: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsThreadsIdSubscriptionPut(_id: Int, putSubscription: PutSubscription, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Subscription?,_ error: Error?) -> Void)) {
        notificationsThreadsIdSubscriptionPutWithRequestBuilder(_id: _id, putSubscription: putSubscription, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /notifications/threads/{id}/subscription
     - Set a Thread Subscription. This lets you subscribe to a thread, or ignore it. Subscribing to a thread is unnecessary if the user is already subscribed to the repository. Ignoring a thread will mute all future notifications (until you comment or get @mentioned). 
     - parameter _id: (path) Id of thread. 
     - parameter putSubscription: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Subscription> 
     */
    open class func notificationsThreadsIdSubscriptionPutWithRequestBuilder(_id: Int, putSubscription: PutSubscription, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Subscription> {
        var path = "/notifications/threads/{id}/subscription"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: putSubscription)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subscription>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgEventsGet(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Events?,_ error: Error?) -> Void)) {
        orgsOrgEventsGetWithRequestBuilder(org: org, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /orgs/{org}/events
     - List public events for an organization.
     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Events> 
     */
    open class func orgsOrgEventsGetWithRequestBuilder(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Events> {
        var path = "/orgs/{org}/events"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Events>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgGet(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        orgsOrgGetWithRequestBuilder(org: org, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /orgs/{org}
     - Get an Organization.
     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Organization> 
     */
    open class func orgsOrgGetWithRequestBuilder(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Organization> {
        var path = "/orgs/{org}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Organization>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_orgsOrgIssuesGet: String {
        case assigned = "assigned"
        case created = "created"
        case mentioned = "mentioned"
        case subscribed = "subscribed"
        case all = "all"
    }

    /**
     * enum for parameter state
     */
    public enum State_orgsOrgIssuesGet: String {
        case _open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_orgsOrgIssuesGet: String {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_orgsOrgIssuesGet: String {
        case asc = "asc"
        case desc = "desc"
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgIssuesGet(org: String, filter: Filter_orgsOrgIssuesGet, state: State_orgsOrgIssuesGet, labels: String, sort: Sort_orgsOrgIssuesGet, direction: Direction_orgsOrgIssuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Issues?,_ error: Error?) -> Void)) {
        orgsOrgIssuesGetWithRequestBuilder(org: org, filter: filter, state: state, labels: labels, sort: sort, direction: direction, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /orgs/{org}/issues
     - List issues. List all issues for a given organization for the authenticated user. 
     - parameter org: (path) Name of organisation. 
     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Issues> 
     */
    open class func orgsOrgIssuesGetWithRequestBuilder(org: String, filter: Filter_orgsOrgIssuesGet, state: State_orgsOrgIssuesGet, labels: String, sort: Sort_orgsOrgIssuesGet, direction: Direction_orgsOrgIssuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Issues> {
        var path = "/orgs/{org}/issues"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter.rawValue, 
            "state": state.rawValue, 
            "labels": labels, 
            "sort": sort.rawValue, 
            "direction": direction.rawValue, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Issues>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgMembersGet(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        orgsOrgMembersGetWithRequestBuilder(org: org, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /orgs/{org}/members
     - Members list. List all users who are members of an organization. A member is a user tha belongs to at least 1 team in the organization. If the authenticated user is also an owner of this organization then both concealed and public members will be returned. If the requester is not an owner of the organization the query will be redirected to the public members list. 
     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func orgsOrgMembersGetWithRequestBuilder(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/orgs/{org}/members"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgMembersUsernameDelete(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsOrgMembersUsernameDeleteWithRequestBuilder(org: org, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /orgs/{org}/members/{username}
     - Remove a member. Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. 
     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgMembersUsernameDeleteWithRequestBuilder(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgMembersUsernameGet(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsOrgMembersUsernameGetWithRequestBuilder(org: org, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /orgs/{org}/members/{username}
     - Check if a user is, publicly or privately, a member of the organization.
     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgMembersUsernameGetWithRequestBuilder(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter patchOrg: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgPatch(org: String, patchOrg: PatchOrg, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        orgsOrgPatchWithRequestBuilder(org: org, patchOrg: patchOrg, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /orgs/{org}
     - Edit an Organization.
     - parameter org: (path) Name of organisation. 
     - parameter patchOrg: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Organization> 
     */
    open class func orgsOrgPatchWithRequestBuilder(org: String, patchOrg: PatchOrg, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Organization> {
        var path = "/orgs/{org}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchOrg)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Organization>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgPublicMembersGet(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        orgsOrgPublicMembersGetWithRequestBuilder(org: org, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /orgs/{org}/public_members
     - Public members list. Members of an organization can choose to have their membership publicized or not. 
     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func orgsOrgPublicMembersGetWithRequestBuilder(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/orgs/{org}/public_members"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgPublicMembersUsernameDelete(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsOrgPublicMembersUsernameDeleteWithRequestBuilder(org: org, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /orgs/{org}/public_members/{username}
     - Conceal a user's membership.
     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgPublicMembersUsernameDeleteWithRequestBuilder(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgPublicMembersUsernameGet(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsOrgPublicMembersUsernameGetWithRequestBuilder(org: org, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /orgs/{org}/public_members/{username}
     - Check public membership.
     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgPublicMembersUsernameGetWithRequestBuilder(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgPublicMembersUsernamePut(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgsOrgPublicMembersUsernamePutWithRequestBuilder(org: org, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /orgs/{org}/public_members/{username}
     - Publicize a user's membership.
     - parameter org: (path) Name of organisation. 
     - parameter username: (path) Name of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func orgsOrgPublicMembersUsernamePutWithRequestBuilder(org: String, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_orgsOrgReposGet: String {
        case all = "all"
        case _public = "public"
        case _private = "private"
        case forks = "forks"
        case sources = "sources"
        case member = "member"
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter type: (query)  (optional, default to "all")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgReposGet(org: String, type: ModelType_orgsOrgReposGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repos?,_ error: Error?) -> Void)) {
        orgsOrgReposGetWithRequestBuilder(org: org, type: type, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /orgs/{org}/repos
     - List repositories for the specified org.
     - parameter org: (path) Name of organisation. 
     - parameter type: (query)  (optional, default to "all")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repos> 
     */
    open class func orgsOrgReposGetWithRequestBuilder(org: String, type: ModelType_orgsOrgReposGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repos> {
        var path = "/orgs/{org}/repos"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repos>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter postRepo: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgReposPost(org: String, postRepo: PostRepo, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repos?,_ error: Error?) -> Void)) {
        orgsOrgReposPostWithRequestBuilder(org: org, postRepo: postRepo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /orgs/{org}/repos
     - Create a new repository for the authenticated user. OAuth users must supply repo scope. 
     - parameter org: (path) Name of organisation. 
     - parameter postRepo: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repos> 
     */
    open class func orgsOrgReposPostWithRequestBuilder(org: String, postRepo: PostRepo, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repos> {
        var path = "/orgs/{org}/repos"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postRepo)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repos>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgTeamsGet(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Teams?,_ error: Error?) -> Void)) {
        orgsOrgTeamsGetWithRequestBuilder(org: org, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /orgs/{org}/teams
     - List teams.
     - parameter org: (path) Name of organisation. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Teams> 
     */
    open class func orgsOrgTeamsGetWithRequestBuilder(org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Teams> {
        var path = "/orgs/{org}/teams"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Teams>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter org: (path) Name of organisation. 
     - parameter orgTeamsPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgsOrgTeamsPost(org: String, orgTeamsPost: OrgTeamsPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        orgsOrgTeamsPostWithRequestBuilder(org: org, orgTeamsPost: orgTeamsPost, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /orgs/{org}/teams
     - Create team. In order to create a team, the authenticated user must be an owner of organization. 
     - parameter org: (path) Name of organisation. 
     - parameter orgTeamsPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Team> 
     */
    open class func orgsOrgTeamsPostWithRequestBuilder(org: String, orgTeamsPost: OrgTeamsPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Team> {
        var path = "/orgs/{org}/teams"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orgTeamsPost)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rateLimitGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: RateLimit?,_ error: Error?) -> Void)) {
        rateLimitGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /rate_limit
     - Get your current rate limit status Note: Accessing this endpoint does not count against your rate limit. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<RateLimit> 
     */
    open class func rateLimitGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<RateLimit> {
        let path = "/rate_limit"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RateLimit>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter archiveFormat
     */
    public enum ArchiveFormat_reposOwnerRepoArchiveFormatPathGet: String {
        case tarball = "tarball"
        case zipball = "zipball"
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter archiveFormat: (path)  
     - parameter path: (path) Valid Git reference, defaults to &#39;master&#39;. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoArchiveFormatPathGet(owner: String, repo: String, archiveFormat: ArchiveFormat_reposOwnerRepoArchiveFormatPathGet, path: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoArchiveFormatPathGetWithRequestBuilder(owner: owner, repo: repo, archiveFormat: archiveFormat, path: path, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /repos/{owner}/{repo}/{archive_format}/{path}
     - Get archive link. This method will return a 302 to a URL to download a tarball or zipball archive for a repository. Please make sure your HTTP framework is configured to follow redirects or you will need to use the Location header to make a second GET request. Note: For private repositories, these links are temporary and expire quickly. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter archiveFormat: (path)  
     - parameter path: (path) Valid Git reference, defaults to &#39;master&#39;. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoArchiveFormatPathGetWithRequestBuilder(owner: String, repo: String, archiveFormat: ArchiveFormat_reposOwnerRepoArchiveFormatPathGet, path: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/{archive_format}/{path}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let archiveFormatPreEscape = "\(archiveFormat.rawValue)"
        let archiveFormatPostEscape = archiveFormatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{archive_format}", with: archiveFormatPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter assignee: (path) Login of the assignee. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoAssigneesAssigneeGet(owner: String, repo: String, assignee: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoAssigneesAssigneeGetWithRequestBuilder(owner: owner, repo: repo, assignee: assignee, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /repos/{owner}/{repo}/assignees/{assignee}
     - Check assignee. You may also check to see if a particular user is an assignee for a repository. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter assignee: (path) Login of the assignee. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoAssigneesAssigneeGetWithRequestBuilder(owner: String, repo: String, assignee: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/assignees/{assignee}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let assigneePreEscape = "\(assignee)"
        let assigneePostEscape = assigneePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignee}", with: assigneePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoAssigneesGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Assignees?,_ error: Error?) -> Void)) {
        reposOwnerRepoAssigneesGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/assignees
     - List assignees. This call lists all the available assignees (owner + collaborators) to which issues may be assigned. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Assignees> 
     */
    open class func reposOwnerRepoAssigneesGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Assignees> {
        var path = "/repos/{owner}/{repo}/assignees"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Assignees>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter branch: (path) Name of the branch. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoBranchesBranchGet(owner: String, repo: String, branch: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Branch?,_ error: Error?) -> Void)) {
        reposOwnerRepoBranchesBranchGetWithRequestBuilder(owner: owner, repo: repo, branch: branch, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/branches/{branch}
     - Get Branch
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter branch: (path) Name of the branch. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Branch> 
     */
    open class func reposOwnerRepoBranchesBranchGetWithRequestBuilder(owner: String, repo: String, branch: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Branch> {
        var path = "/repos/{owner}/{repo}/branches/{branch}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(branch)"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Branch>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoBranchesGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Branches?,_ error: Error?) -> Void)) {
        reposOwnerRepoBranchesGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/branches
     - Get list of branches
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Branches> 
     */
    open class func reposOwnerRepoBranchesGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Branches> {
        var path = "/repos/{owner}/{repo}/branches"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Branches>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCollaboratorsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        reposOwnerRepoCollaboratorsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/collaborators
     - List. When authenticating as an organization owner of an organization-owned repository, all organization owners are included in the list of collaborators. Otherwise, only users with access to the repository are returned in the collaborators list. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func reposOwnerRepoCollaboratorsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/repos/{owner}/{repo}/collaborators"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter user: (path) Login of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCollaboratorsUserDelete(owner: String, repo: String, user: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoCollaboratorsUserDeleteWithRequestBuilder(owner: owner, repo: repo, user: user, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/collaborators/{user}
     - Remove collaborator.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter user: (path) Login of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoCollaboratorsUserDeleteWithRequestBuilder(owner: String, repo: String, user: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{user}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let userPreEscape = "\(user)"
        let userPostEscape = userPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user}", with: userPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter user: (path) Login of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCollaboratorsUserGet(owner: String, repo: String, user: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoCollaboratorsUserGetWithRequestBuilder(owner: owner, repo: repo, user: user, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /repos/{owner}/{repo}/collaborators/{user}
     - Check if user is a collaborator
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter user: (path) Login of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoCollaboratorsUserGetWithRequestBuilder(owner: String, repo: String, user: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{user}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let userPreEscape = "\(user)"
        let userPostEscape = userPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user}", with: userPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter user: (path) Login of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCollaboratorsUserPut(owner: String, repo: String, user: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoCollaboratorsUserPutWithRequestBuilder(owner: owner, repo: repo, user: user, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /repos/{owner}/{repo}/collaborators/{user}
     - Add collaborator.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter user: (path) Login of the user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoCollaboratorsUserPutWithRequestBuilder(owner: String, repo: String, user: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{user}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let userPreEscape = "\(user)"
        let userPostEscape = userPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user}", with: userPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommentsCommentIdDelete(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommentsCommentIdDeleteWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/comments/{commentId}
     - Delete a commit comment
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoCommentsCommentIdDeleteWithRequestBuilder(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommentsCommentIdGet(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CommitComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommentsCommentIdGetWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/comments/{commentId}
     - Get a single commit comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CommitComments> 
     */
    open class func reposOwnerRepoCommentsCommentIdGetWithRequestBuilder(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CommitComments> {
        var path = "/repos/{owner}/{repo}/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommitComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommentsCommentIdPatch(owner: String, repo: String, commentId: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CommitComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommentsCommentIdPatchWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, commentBody: commentBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/comments/{commentId}
     - Update a commit comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CommitComments> 
     */
    open class func reposOwnerRepoCommentsCommentIdPatchWithRequestBuilder(owner: String, repo: String, commentId: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CommitComments> {
        var path = "/repos/{owner}/{repo}/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommitComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommentsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: RepoComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommentsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/comments
     - List commit comments for a repository. Comments are ordered by ascending ID. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<RepoComments> 
     */
    open class func reposOwnerRepoCommentsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<RepoComments> {
        var path = "/repos/{owner}/{repo}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RepoComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter sha: (query) Sha or branch to start listing commits from. (optional)
     - parameter path: (query) Only commits containing this file path will be returned. (optional)
     - parameter author: (query) GitHub login, name, or email by which to filter by commit author. (optional)
     - parameter until: (query) ISO 8601 Date - Only commits before this date will be returned. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommitsGet(owner: String, repo: String, since: String? = nil, sha: String? = nil, path: String? = nil, author: String? = nil, until: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Commits?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommitsGetWithRequestBuilder(owner: owner, repo: repo, since: since, sha: sha, path: path, author: author, until: until, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/commits
     - List commits on a repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter sha: (query) Sha or branch to start listing commits from. (optional)
     - parameter path: (query) Only commits containing this file path will be returned. (optional)
     - parameter author: (query) GitHub login, name, or email by which to filter by commit author. (optional)
     - parameter until: (query) ISO 8601 Date - Only commits before this date will be returned. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Commits> 
     */
    open class func reposOwnerRepoCommitsGetWithRequestBuilder(owner: String, repo: String, since: String? = nil, sha: String? = nil, path: String? = nil, author: String? = nil, until: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Commits> {
        var path = "/repos/{owner}/{repo}/commits"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since, 
            "sha": sha, 
            "path": path, 
            "author": author, 
            "until": until
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Commits>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommitsRefStatusGet(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: RefStatus?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommitsRefStatusGetWithRequestBuilder(owner: owner, repo: repo, ref: ref, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/commits/{ref}/status
     - Get the combined Status for a specific Ref The Combined status endpoint is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the blog post for full details. To access this endpoint during the preview period, you must provide a custom media type in the Accept header: application/vnd.github.she-hulk-preview+json 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<RefStatus> 
     */
    open class func reposOwnerRepoCommitsRefStatusGetWithRequestBuilder(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<RefStatus> {
        var path = "/repos/{owner}/{repo}/commits/{ref}/status"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RefStatus>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code of the commit. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommitsShaCodeCommentsGet(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: RepoComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommitsShaCodeCommentsGetWithRequestBuilder(owner: owner, repo: repo, shaCode: shaCode, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/commits/{shaCode}/comments
     - List comments for a single commitList comments for a single commit.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code of the commit. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<RepoComments> 
     */
    open class func reposOwnerRepoCommitsShaCodeCommentsGetWithRequestBuilder(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<RepoComments> {
        var path = "/repos/{owner}/{repo}/commits/{shaCode}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaCodePreEscape = "\(shaCode)"
        let shaCodePostEscape = shaCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shaCode}", with: shaCodePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RepoComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code of the commit. 
     - parameter commitBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommitsShaCodeCommentsPost(owner: String, repo: String, shaCode: String, commitBody: CommitBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CommitComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommitsShaCodeCommentsPostWithRequestBuilder(owner: owner, repo: repo, shaCode: shaCode, commitBody: commitBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/commits/{shaCode}/comments
     - Create a commit comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code of the commit. 
     - parameter commitBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CommitComments> 
     */
    open class func reposOwnerRepoCommitsShaCodeCommentsPostWithRequestBuilder(owner: String, repo: String, shaCode: String, commitBody: CommitBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CommitComments> {
        var path = "/repos/{owner}/{repo}/commits/{shaCode}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaCodePreEscape = "\(shaCode)"
        let shaCodePostEscape = shaCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shaCode}", with: shaCodePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commitBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommitComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code of the commit. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCommitsShaCodeGet(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Commit?,_ error: Error?) -> Void)) {
        reposOwnerRepoCommitsShaCodeGetWithRequestBuilder(owner: owner, repo: repo, shaCode: shaCode, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/commits/{shaCode}
     - Get a single commit.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code of the commit. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Commit> 
     */
    open class func reposOwnerRepoCommitsShaCodeGetWithRequestBuilder(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Commit> {
        var path = "/repos/{owner}/{repo}/commits/{shaCode}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaCodePreEscape = "\(shaCode)"
        let shaCodePostEscape = shaCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shaCode}", with: shaCodePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Commit>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter baseId: (path)  
     - parameter headId: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoCompareBaseIdHeadIdGet(owner: String, repo: String, baseId: String, headId: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CompareCommits?,_ error: Error?) -> Void)) {
        reposOwnerRepoCompareBaseIdHeadIdGetWithRequestBuilder(owner: owner, repo: repo, baseId: baseId, headId: headId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/compare/{baseId}...{headId}
     - Compare two commits
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter baseId: (path)  
     - parameter headId: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CompareCommits> 
     */
    open class func reposOwnerRepoCompareBaseIdHeadIdGetWithRequestBuilder(owner: String, repo: String, baseId: String, headId: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CompareCommits> {
        var path = "/repos/{owner}/{repo}/compare/{baseId}...{headId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let baseIdPreEscape = "\(baseId)"
        let baseIdPostEscape = baseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{baseId}", with: baseIdPostEscape, options: .literal, range: nil)
        let headIdPreEscape = "\(headId)"
        let headIdPostEscape = headIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{headId}", with: headIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CompareCommits>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter path: (path)  
     - parameter deleteFileBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoContentsPathDelete(owner: String, repo: String, path: String, deleteFileBody: DeleteFileBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: DeleteFile?,_ error: Error?) -> Void)) {
        reposOwnerRepoContentsPathDeleteWithRequestBuilder(owner: owner, repo: repo, path: path, deleteFileBody: deleteFileBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/contents/{path}
     - Delete a file. This method deletes a file in a repository. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter path: (path)  
     - parameter deleteFileBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<DeleteFile> 
     */
    open class func reposOwnerRepoContentsPathDeleteWithRequestBuilder(owner: String, repo: String, path: String, deleteFileBody: DeleteFileBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<DeleteFile> {
        var path = "/repos/{owner}/{repo}/contents/{path}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteFileBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeleteFile>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter path2: (path)  
     - parameter path: (query) The content path. (optional)
     - parameter ref: (query) The String name of the Commit/Branch/Tag. Defaults to &#39;master&#39;. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoContentsPathGet(owner: String, repo: String, path2: String, path: String? = nil, ref: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: ContentsPath?,_ error: Error?) -> Void)) {
        reposOwnerRepoContentsPathGetWithRequestBuilder(owner: owner, repo: repo, path2: path2, path: path, ref: ref, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/contents/{path}
     - Get contents. This method returns the contents of a file or directory in a repository. Files and symlinks support a custom media type for getting the raw content. Directories and submodules do not support custom media types. Note: This API supports files up to 1 megabyte in size. Here can be many outcomes. For details see \"http://developer.github.com/v3/repos/contents/\" 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter path2: (path)  
     - parameter path: (query) The content path. (optional)
     - parameter ref: (query) The String name of the Commit/Branch/Tag. Defaults to &#39;master&#39;. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<ContentsPath> 
     */
    open class func reposOwnerRepoContentsPathGetWithRequestBuilder(owner: String, repo: String, path2: String, path: String? = nil, ref: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<ContentsPath> {
        var path = "/repos/{owner}/{repo}/contents/{path}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "path": path, 
            "ref": ref
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ContentsPath>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter path: (path)  
     - parameter createFileBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoContentsPathPut(owner: String, repo: String, path: String, createFileBody: CreateFileBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CreateFile?,_ error: Error?) -> Void)) {
        reposOwnerRepoContentsPathPutWithRequestBuilder(owner: owner, repo: repo, path: path, createFileBody: createFileBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /repos/{owner}/{repo}/contents/{path}
     - Create a file.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter path: (path)  
     - parameter createFileBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CreateFile> 
     */
    open class func reposOwnerRepoContentsPathPutWithRequestBuilder(owner: String, repo: String, path: String, createFileBody: CreateFileBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CreateFile> {
        var path = "/repos/{owner}/{repo}/contents/{path}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createFileBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CreateFile>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter anon: (query) Set to 1 or true to include anonymous contributors in results. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoContributorsGet(owner: String, repo: String, anon: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Contributors?,_ error: Error?) -> Void)) {
        reposOwnerRepoContributorsGetWithRequestBuilder(owner: owner, repo: repo, anon: anon, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/contributors
     - Get list of contributors.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter anon: (query) Set to 1 or true to include anonymous contributors in results. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Contributors> 
     */
    open class func reposOwnerRepoContributorsGetWithRequestBuilder(owner: String, repo: String, anon: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Contributors> {
        var path = "/repos/{owner}/{repo}/contributors"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "anon": anon
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Contributors>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDelete(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoDeleteWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}
     - Delete a Repository. Deleting a repository requires admin access. If OAuth is used, the delete_repo scope is required. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoDeleteWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDeploymentsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: RepoDeployments?,_ error: Error?) -> Void)) {
        reposOwnerRepoDeploymentsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/deployments
     - Users with pull access can view deployments for a repository
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<RepoDeployments> 
     */
    open class func reposOwnerRepoDeploymentsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<RepoDeployments> {
        var path = "/repos/{owner}/{repo}/deployments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RepoDeployments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path) The Deployment ID to list the statuses from. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDeploymentsIdStatusesGet(owner: String, repo: String, _id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: DeploymentStatuses?,_ error: Error?) -> Void)) {
        reposOwnerRepoDeploymentsIdStatusesGetWithRequestBuilder(owner: owner, repo: repo, _id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/deployments/{id}/statuses
     - Users with pull access can view deployment statuses for a deployment
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path) The Deployment ID to list the statuses from. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<DeploymentStatuses> 
     */
    open class func reposOwnerRepoDeploymentsIdStatusesGetWithRequestBuilder(owner: String, repo: String, _id: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<DeploymentStatuses> {
        var path = "/repos/{owner}/{repo}/deployments/{id}/statuses"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeploymentStatuses>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path) The Deployment ID to list the statuses from. 
     - parameter deploymentStatusesCreate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDeploymentsIdStatusesPost(owner: String, repo: String, _id: Int, deploymentStatusesCreate: DeploymentStatusesCreate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoDeploymentsIdStatusesPostWithRequestBuilder(owner: owner, repo: repo, _id: _id, deploymentStatusesCreate: deploymentStatusesCreate, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /repos/{owner}/{repo}/deployments/{id}/statuses
     - Create a Deployment Status Users with push access can create deployment statuses for a given deployment: 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path) The Deployment ID to list the statuses from. 
     - parameter deploymentStatusesCreate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoDeploymentsIdStatusesPostWithRequestBuilder(owner: String, repo: String, _id: Int, deploymentStatusesCreate: DeploymentStatusesCreate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/deployments/{id}/statuses"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deploymentStatusesCreate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter deployment: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDeploymentsPost(owner: String, repo: String, deployment: Deployment, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: DeploymentResp?,_ error: Error?) -> Void)) {
        reposOwnerRepoDeploymentsPostWithRequestBuilder(owner: owner, repo: repo, deployment: deployment, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/deployments
     - Users with push access can create a deployment for a given ref
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter deployment: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<DeploymentResp> 
     */
    open class func reposOwnerRepoDeploymentsPostWithRequestBuilder(owner: String, repo: String, deployment: Deployment, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<DeploymentResp> {
        var path = "/repos/{owner}/{repo}/deployments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployment)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeploymentResp>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter downloadId: (path) Id of download. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDownloadsDownloadIdDelete(owner: String, repo: String, downloadId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoDownloadsDownloadIdDeleteWithRequestBuilder(owner: owner, repo: repo, downloadId: downloadId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/downloads/{downloadId}
     - Deprecated. Delete a download.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter downloadId: (path) Id of download. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoDownloadsDownloadIdDeleteWithRequestBuilder(owner: String, repo: String, downloadId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/downloads/{downloadId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let downloadIdPreEscape = "\(downloadId)"
        let downloadIdPostEscape = downloadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{downloadId}", with: downloadIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter downloadId: (path) Id of download. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDownloadsDownloadIdGet(owner: String, repo: String, downloadId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Downloads?,_ error: Error?) -> Void)) {
        reposOwnerRepoDownloadsDownloadIdGetWithRequestBuilder(owner: owner, repo: repo, downloadId: downloadId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/downloads/{downloadId}
     - Deprecated. Get a single download.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter downloadId: (path) Id of download. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Downloads> 
     */
    open class func reposOwnerRepoDownloadsDownloadIdGetWithRequestBuilder(owner: String, repo: String, downloadId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Downloads> {
        var path = "/repos/{owner}/{repo}/downloads/{downloadId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let downloadIdPreEscape = "\(downloadId)"
        let downloadIdPostEscape = downloadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{downloadId}", with: downloadIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Downloads>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoDownloadsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Downloads?,_ error: Error?) -> Void)) {
        reposOwnerRepoDownloadsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/downloads
     - Deprecated. List downloads for a repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Downloads> 
     */
    open class func reposOwnerRepoDownloadsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Downloads> {
        var path = "/repos/{owner}/{repo}/downloads"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Downloads>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoEventsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Events?,_ error: Error?) -> Void)) {
        reposOwnerRepoEventsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/events
     - Get list of repository events.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Events> 
     */
    open class func reposOwnerRepoEventsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Events> {
        var path = "/repos/{owner}/{repo}/events"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Events>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposOwnerRepoForksGet: String {
        case newes = "newes"
        case oldes = "oldes"
        case watchers = "watchers"
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter sort: (query)  (optional, default to "newes")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoForksGet(owner: String, repo: String, sort: Sort_reposOwnerRepoForksGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Forks?,_ error: Error?) -> Void)) {
        reposOwnerRepoForksGetWithRequestBuilder(owner: owner, repo: repo, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/forks
     - List forks.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter sort: (query)  (optional, default to "newes")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Forks> 
     */
    open class func reposOwnerRepoForksGetWithRequestBuilder(owner: String, repo: String, sort: Sort_reposOwnerRepoForksGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Forks> {
        var path = "/repos/{owner}/{repo}/forks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Forks>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter forkBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoForksPost(owner: String, repo: String, forkBody: ForkBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Fork?,_ error: Error?) -> Void)) {
        reposOwnerRepoForksPostWithRequestBuilder(owner: owner, repo: repo, forkBody: forkBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/forks
     - Create a fork. Forking a Repository happens asynchronously. Therefore, you may have to wai a short period before accessing the git objects. If this takes longer than 5 minutes, be sure to contact Support. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter forkBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Fork> 
     */
    open class func reposOwnerRepoForksPostWithRequestBuilder(owner: String, repo: String, forkBody: ForkBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Fork> {
        var path = "/repos/{owner}/{repo}/forks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: forkBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Fork>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repo?,_ error: Error?) -> Void)) {
        reposOwnerRepoGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}
     - Get repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repo> 
     */
    open class func reposOwnerRepoGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repo> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repo>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter blob: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitBlobsPost(owner: String, repo: String, blob: Blob, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Blobs?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitBlobsPostWithRequestBuilder(owner: owner, repo: repo, blob: blob, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/git/blobs
     - Create a Blob.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter blob: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Blobs> 
     */
    open class func reposOwnerRepoGitBlobsPostWithRequestBuilder(owner: String, repo: String, blob: Blob, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Blobs> {
        var path = "/repos/{owner}/{repo}/git/blobs"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: blob)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Blobs>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitBlobsShaCodeGet(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Blob?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitBlobsShaCodeGetWithRequestBuilder(owner: owner, repo: repo, shaCode: shaCode, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/git/blobs/{shaCode}
     - Get a Blob. Since blobs can be any arbitrary binary data, the input and responses for the blob API takes an encoding parameter that can be either utf-8 or base64. If your data cannot be losslessly sent as a UTF-8 string, you can base64 encode it. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Blob> 
     */
    open class func reposOwnerRepoGitBlobsShaCodeGetWithRequestBuilder(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Blob> {
        var path = "/repos/{owner}/{repo}/git/blobs/{shaCode}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaCodePreEscape = "\(shaCode)"
        let shaCodePostEscape = shaCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shaCode}", with: shaCodePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Blob>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter repoCommitBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitCommitsPost(owner: String, repo: String, repoCommitBody: RepoCommitBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: GitCommit?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitCommitsPostWithRequestBuilder(owner: owner, repo: repo, repoCommitBody: repoCommitBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/git/commits
     - Create a Commit.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter repoCommitBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<GitCommit> 
     */
    open class func reposOwnerRepoGitCommitsPostWithRequestBuilder(owner: String, repo: String, repoCommitBody: RepoCommitBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<GitCommit> {
        var path = "/repos/{owner}/{repo}/git/commits"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: repoCommitBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GitCommit>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitCommitsShaCodeGet(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: RepoCommit?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitCommitsShaCodeGetWithRequestBuilder(owner: owner, repo: repo, shaCode: shaCode, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/git/commits/{shaCode}
     - Get a Commit.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) SHA-1 code. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<RepoCommit> 
     */
    open class func reposOwnerRepoGitCommitsShaCodeGetWithRequestBuilder(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<RepoCommit> {
        var path = "/repos/{owner}/{repo}/git/commits/{shaCode}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaCodePreEscape = "\(shaCode)"
        let shaCodePostEscape = shaCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shaCode}", with: shaCodePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RepoCommit>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitRefsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Refs?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitRefsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/git/refs
     - Get all References
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Refs> 
     */
    open class func reposOwnerRepoGitRefsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Refs> {
        var path = "/repos/{owner}/{repo}/git/refs"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Refs>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter refsBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitRefsPost(owner: String, repo: String, refsBody: RefsBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: HeadBranch?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitRefsPostWithRequestBuilder(owner: owner, repo: repo, refsBody: refsBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/git/refs
     - Create a Reference
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter refsBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<HeadBranch> 
     */
    open class func reposOwnerRepoGitRefsPostWithRequestBuilder(owner: String, repo: String, refsBody: RefsBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<HeadBranch> {
        var path = "/repos/{owner}/{repo}/git/refs"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: refsBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<HeadBranch>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitRefsRefDelete(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitRefsRefDeleteWithRequestBuilder(owner: owner, repo: repo, ref: ref, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/git/refs/{ref}
     - Delete a Reference Example: Deleting a branch: DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a  Example: Deleting a tag:        DELETE /repos/octocat/Hello-World/git/refs/tags/v1.0 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoGitRefsRefDeleteWithRequestBuilder(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/git/refs/{ref}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitRefsRefGet(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: HeadBranch?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitRefsRefGetWithRequestBuilder(owner: owner, repo: repo, ref: ref, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/git/refs/{ref}
     - Get a Reference
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<HeadBranch> 
     */
    open class func reposOwnerRepoGitRefsRefGetWithRequestBuilder(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<HeadBranch> {
        var path = "/repos/{owner}/{repo}/git/refs/{ref}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<HeadBranch>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter gitRefPatch: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitRefsRefPatch(owner: String, repo: String, ref: String, gitRefPatch: GitRefPatch, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: HeadBranch?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitRefsRefPatchWithRequestBuilder(owner: owner, repo: repo, ref: ref, gitRefPatch: gitRefPatch, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/git/refs/{ref}
     - Update a Reference
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path)  
     - parameter gitRefPatch: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<HeadBranch> 
     */
    open class func reposOwnerRepoGitRefsRefPatchWithRequestBuilder(owner: String, repo: String, ref: String, gitRefPatch: GitRefPatch, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<HeadBranch> {
        var path = "/repos/{owner}/{repo}/git/refs/{ref}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gitRefPatch)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<HeadBranch>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter tag: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitTagsPost(owner: String, repo: String, tag: Tag, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Tags?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitTagsPostWithRequestBuilder(owner: owner, repo: repo, tag: tag, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/git/tags
     - Create a Tag Object. Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then create the refs/tags/[tag] reference. If you want to create a lightweight tag, you only have to create the tag reference - this call would be unnecessary. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter tag: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Tags> 
     */
    open class func reposOwnerRepoGitTagsPostWithRequestBuilder(owner: String, repo: String, tag: Tag, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Tags> {
        var path = "/repos/{owner}/{repo}/git/tags"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tag)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tags>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitTagsShaCodeGet(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitTagsShaCodeGetWithRequestBuilder(owner: owner, repo: repo, shaCode: shaCode, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/git/tags/{shaCode}
     - Get a Tag.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Tag> 
     */
    open class func reposOwnerRepoGitTagsShaCodeGetWithRequestBuilder(owner: String, repo: String, shaCode: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Tag> {
        var path = "/repos/{owner}/{repo}/git/tags/{shaCode}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaCodePreEscape = "\(shaCode)"
        let shaCodePostEscape = shaCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shaCode}", with: shaCodePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tag>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter tree: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitTreesPost(owner: String, repo: String, tree: Tree, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Trees?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitTreesPostWithRequestBuilder(owner: owner, repo: repo, tree: tree, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/git/trees
     - Create a Tree. The tree creation API will take nested entries as well. If both a tree and a nested path modifying that tree are specified, it will overwrite the contents of that tree with the new path contents and write a new tree out. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter tree: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Trees> 
     */
    open class func reposOwnerRepoGitTreesPostWithRequestBuilder(owner: String, repo: String, tree: Tree, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Trees> {
        var path = "/repos/{owner}/{repo}/git/trees"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tree)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Trees>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) Tree SHA. 
     - parameter recursive: (query) Get a Tree Recursively. (0 or 1) (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoGitTreesShaCodeGet(owner: String, repo: String, shaCode: String, recursive: Int? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Tree?,_ error: Error?) -> Void)) {
        reposOwnerRepoGitTreesShaCodeGetWithRequestBuilder(owner: owner, repo: repo, shaCode: shaCode, recursive: recursive, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/git/trees/{shaCode}
     - Get a Tree.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter shaCode: (path) Tree SHA. 
     - parameter recursive: (query) Get a Tree Recursively. (0 or 1) (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Tree> 
     */
    open class func reposOwnerRepoGitTreesShaCodeGetWithRequestBuilder(owner: String, repo: String, shaCode: String, recursive: Int? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Tree> {
        var path = "/repos/{owner}/{repo}/git/trees/{shaCode}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaCodePreEscape = "\(shaCode)"
        let shaCodePostEscape = shaCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shaCode}", with: shaCodePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "recursive": recursive?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tree>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoHooksGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        reposOwnerRepoHooksGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/hooks
     - Get list of hooks.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Hook> 
     */
    open class func reposOwnerRepoHooksGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Hook>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoHooksHookIdDelete(owner: String, repo: String, hookId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoHooksHookIdDeleteWithRequestBuilder(owner: owner, repo: repo, hookId: hookId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/hooks/{hookId}
     - Delete a hook.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoHooksHookIdDeleteWithRequestBuilder(owner: String, repo: String, hookId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/hooks/{hookId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(hookId)"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hookId}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoHooksHookIdGet(owner: String, repo: String, hookId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        reposOwnerRepoHooksHookIdGetWithRequestBuilder(owner: owner, repo: repo, hookId: hookId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/hooks/{hookId}
     - Get single hook.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Hook> 
     */
    open class func reposOwnerRepoHooksHookIdGetWithRequestBuilder(owner: String, repo: String, hookId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks/{hookId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(hookId)"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hookId}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Hook>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter hookBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoHooksHookIdPatch(owner: String, repo: String, hookId: Int, hookBody: HookBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        reposOwnerRepoHooksHookIdPatchWithRequestBuilder(owner: owner, repo: repo, hookId: hookId, hookBody: hookBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/hooks/{hookId}
     - Edit a hook.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter hookBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Hook> 
     */
    open class func reposOwnerRepoHooksHookIdPatchWithRequestBuilder(owner: String, repo: String, hookId: Int, hookBody: HookBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks/{hookId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(hookId)"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hookId}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hookBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Hook>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoHooksHookIdTestsPost(owner: String, repo: String, hookId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoHooksHookIdTestsPostWithRequestBuilder(owner: owner, repo: repo, hookId: hookId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /repos/{owner}/{repo}/hooks/{hookId}/tests
     - Test a push hook. This will trigger the hook with the latest push to the current repository if the hook is subscribed to push events. If the hook is not subscribed to push events, the server will respond with 204 but no test POST will be generated. Note: Previously /repos/:owner/:repo/hooks/:id/tes 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookId: (path) Id of hook. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoHooksHookIdTestsPostWithRequestBuilder(owner: String, repo: String, hookId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/hooks/{hookId}/tests"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let hookIdPreEscape = "\(hookId)"
        let hookIdPostEscape = hookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hookId}", with: hookIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoHooksPost(owner: String, repo: String, hookBody: HookBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        reposOwnerRepoHooksPostWithRequestBuilder(owner: owner, repo: repo, hookBody: hookBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/hooks
     - Create a hook.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter hookBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Hook> 
     */
    open class func reposOwnerRepoHooksPostWithRequestBuilder(owner: String, repo: String, hookBody: HookBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hookBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Hook>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) ID of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesCommentsCommentIdDelete(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesCommentsCommentIdDeleteWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/issues/comments/{commentId}
     - Delete a comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) ID of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoIssuesCommentsCommentIdDeleteWithRequestBuilder(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) ID of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesCommentsCommentIdGet(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: IssuesComment?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesCommentsCommentIdGetWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/comments/{commentId}
     - Get a single comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) ID of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<IssuesComment> 
     */
    open class func reposOwnerRepoIssuesCommentsCommentIdGetWithRequestBuilder(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<IssuesComment> {
        var path = "/repos/{owner}/{repo}/issues/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IssuesComment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) ID of comment. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesCommentsCommentIdPatch(owner: String, repo: String, commentId: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: IssuesComment?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesCommentsCommentIdPatchWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, commentBody: commentBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/issues/comments/{commentId}
     - Edit a comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) ID of comment. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<IssuesComment> 
     */
    open class func reposOwnerRepoIssuesCommentsCommentIdPatchWithRequestBuilder(owner: String, repo: String, commentId: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<IssuesComment> {
        var path = "/repos/{owner}/{repo}/issues/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IssuesComment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposOwnerRepoIssuesCommentsGet: String {
        case created = "created"
        case updated = "updated"
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesCommentsGet(owner: String, repo: String, direction: String? = nil, sort: Sort_reposOwnerRepoIssuesCommentsGet? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: IssuesComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesCommentsGetWithRequestBuilder(owner: owner, repo: repo, direction: direction, sort: sort, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/comments
     - List comments in a repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<IssuesComments> 
     */
    open class func reposOwnerRepoIssuesCommentsGetWithRequestBuilder(owner: String, repo: String, direction: String? = nil, sort: Sort_reposOwnerRepoIssuesCommentsGet? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<IssuesComments> {
        var path = "/repos/{owner}/{repo}/issues/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction": direction, 
            "sort": sort?.rawValue, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IssuesComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter eventId: (path) Id of the event. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesEventsEventIdGet(owner: String, repo: String, eventId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Event?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesEventsEventIdGetWithRequestBuilder(owner: owner, repo: repo, eventId: eventId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/events/{eventId}
     - Get a single event.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter eventId: (path) Id of the event. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Event> 
     */
    open class func reposOwnerRepoIssuesEventsEventIdGetWithRequestBuilder(owner: String, repo: String, eventId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Event> {
        var path = "/repos/{owner}/{repo}/issues/events/{eventId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Event>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesEventsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Events?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesEventsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/events
     - List issue events for a repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Events> 
     */
    open class func reposOwnerRepoIssuesEventsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Events> {
        var path = "/repos/{owner}/{repo}/issues/events"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Events>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_reposOwnerRepoIssuesGet: String {
        case assigned = "assigned"
        case created = "created"
        case mentioned = "mentioned"
        case subscribed = "subscribed"
        case all = "all"
    }

    /**
     * enum for parameter state
     */
    public enum State_reposOwnerRepoIssuesGet: String {
        case _open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposOwnerRepoIssuesGet: String {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_reposOwnerRepoIssuesGet: String {
        case asc = "asc"
        case desc = "desc"
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesGet(owner: String, repo: String, filter: Filter_reposOwnerRepoIssuesGet, state: State_reposOwnerRepoIssuesGet, labels: String, sort: Sort_reposOwnerRepoIssuesGet, direction: Direction_reposOwnerRepoIssuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Issues?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesGetWithRequestBuilder(owner: owner, repo: repo, filter: filter, state: state, labels: labels, sort: sort, direction: direction, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues
     - List issues for a repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Issues> 
     */
    open class func reposOwnerRepoIssuesGetWithRequestBuilder(owner: String, repo: String, filter: Filter_reposOwnerRepoIssuesGet, state: State_reposOwnerRepoIssuesGet, labels: String, sort: Sort_reposOwnerRepoIssuesGet, direction: Direction_reposOwnerRepoIssuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Issues> {
        var path = "/repos/{owner}/{repo}/issues"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter.rawValue, 
            "state": state.rawValue, 
            "labels": labels, 
            "sort": sort.rawValue, 
            "direction": direction.rawValue, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Issues>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberCommentsGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: IssuesComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberCommentsGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/{number}/comments
     - List comments on an issue.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<IssuesComments> 
     */
    open class func reposOwnerRepoIssuesNumberCommentsGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<IssuesComments> {
        var path = "/repos/{owner}/{repo}/issues/{number}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IssuesComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberCommentsPost(owner: String, repo: String, number: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: IssuesComment?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberCommentsPostWithRequestBuilder(owner: owner, repo: repo, number: number, commentBody: commentBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/issues/{number}/comments
     - Create a comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<IssuesComment> 
     */
    open class func reposOwnerRepoIssuesNumberCommentsPostWithRequestBuilder(owner: String, repo: String, number: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<IssuesComment> {
        var path = "/repos/{owner}/{repo}/issues/{number}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IssuesComment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberEventsGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Events?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberEventsGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/{number}/events
     - List events for an issue.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Events> 
     */
    open class func reposOwnerRepoIssuesNumberEventsGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Events> {
        var path = "/repos/{owner}/{repo}/issues/{number}/events"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Events>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/{number}
     - Get a single issue
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Issue> 
     */
    open class func reposOwnerRepoIssuesNumberGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues/{number}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Issue>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberLabelsDelete(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberLabelsDeleteWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/issues/{number}/labels
     - Remove all labels from an issue.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoIssuesNumberLabelsDeleteWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{number}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberLabelsGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Labels?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberLabelsGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/issues/{number}/labels
     - List labels on an issue.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Labels> 
     */
    open class func reposOwnerRepoIssuesNumberLabelsGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Labels> {
        var path = "/repos/{owner}/{repo}/issues/{number}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Labels>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter name: (path) Name of the label. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberLabelsNameDelete(owner: String, repo: String, number: Int, name: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberLabelsNameDeleteWithRequestBuilder(owner: owner, repo: repo, number: number, name: name, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/issues/{number}/labels/{name}
     - Remove a label from an issue.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter name: (path) Name of the label. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoIssuesNumberLabelsNameDeleteWithRequestBuilder(owner: String, repo: String, number: Int, name: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{number}/labels/{name}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberLabelsPost(owner: String, repo: String, number: Int, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberLabelsPostWithRequestBuilder(owner: owner, repo: repo, number: number, ERROR_UNKNOWN: ERROR_UNKNOWN, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/issues/{number}/labels
     - Add labels to an issue.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Label> 
     */
    open class func reposOwnerRepoIssuesNumberLabelsPostWithRequestBuilder(owner: String, repo: String, number: Int, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/issues/{number}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ERROR_UNKNOWN)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Label>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberLabelsPut(owner: String, repo: String, number: Int, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberLabelsPutWithRequestBuilder(owner: owner, repo: repo, number: number, ERROR_UNKNOWN: ERROR_UNKNOWN, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /repos/{owner}/{repo}/issues/{number}/labels
     - Replace all labels for an issue. Sending an empty array ([]) will remove all Labels from the Issue. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Label> 
     */
    open class func reposOwnerRepoIssuesNumberLabelsPutWithRequestBuilder(owner: String, repo: String, number: Int, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/issues/{number}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ERROR_UNKNOWN)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Label>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter issue: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesNumberPatch(owner: String, repo: String, number: Int, issue: Issue, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesNumberPatchWithRequestBuilder(owner: owner, repo: repo, number: number, issue: issue, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/issues/{number}
     - Edit an issue. Issue owners and users with push access can edit an issue. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of issue. 
     - parameter issue: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Issue> 
     */
    open class func reposOwnerRepoIssuesNumberPatchWithRequestBuilder(owner: String, repo: String, number: Int, issue: Issue, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues/{number}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issue)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Issue>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter issue: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoIssuesPost(owner: String, repo: String, issue: Issue, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        reposOwnerRepoIssuesPostWithRequestBuilder(owner: owner, repo: repo, issue: issue, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/issues
     - Create an issue. Any user with pull access to a repository can create an issue. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter issue: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Issue> 
     */
    open class func reposOwnerRepoIssuesPostWithRequestBuilder(owner: String, repo: String, issue: Issue, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issue)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Issue>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoKeysGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Keys?,_ error: Error?) -> Void)) {
        reposOwnerRepoKeysGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/keys
     - Get list of keys.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Keys> 
     */
    open class func reposOwnerRepoKeysGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Keys> {
        var path = "/repos/{owner}/{repo}/keys"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Keys>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter keyId: (path) Id of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoKeysKeyIdDelete(owner: String, repo: String, keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoKeysKeyIdDeleteWithRequestBuilder(owner: owner, repo: repo, keyId: keyId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/keys/{keyId}
     - Delete a key.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter keyId: (path) Id of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoKeysKeyIdDeleteWithRequestBuilder(owner: String, repo: String, keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/keys/{keyId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(keyId)"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter keyId: (path) Id of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoKeysKeyIdGet(owner: String, repo: String, keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: UserKeysKeyId?,_ error: Error?) -> Void)) {
        reposOwnerRepoKeysKeyIdGetWithRequestBuilder(owner: owner, repo: repo, keyId: keyId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/keys/{keyId}
     - Get a key
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter keyId: (path) Id of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<UserKeysKeyId> 
     */
    open class func reposOwnerRepoKeysKeyIdGetWithRequestBuilder(owner: String, repo: String, keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<UserKeysKeyId> {
        var path = "/repos/{owner}/{repo}/keys/{keyId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(keyId)"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserKeysKeyId>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter userKeysPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoKeysPost(owner: String, repo: String, userKeysPost: UserKeysPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: UserKeysKeyId?,_ error: Error?) -> Void)) {
        reposOwnerRepoKeysPostWithRequestBuilder(owner: owner, repo: repo, userKeysPost: userKeysPost, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/keys
     - Create a key.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter userKeysPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<UserKeysKeyId> 
     */
    open class func reposOwnerRepoKeysPostWithRequestBuilder(owner: String, repo: String, userKeysPost: UserKeysPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<UserKeysKeyId> {
        var path = "/repos/{owner}/{repo}/keys"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userKeysPost)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserKeysKeyId>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoLabelsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Labels?,_ error: Error?) -> Void)) {
        reposOwnerRepoLabelsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/labels
     - List all labels for this repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Labels> 
     */
    open class func reposOwnerRepoLabelsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Labels> {
        var path = "/repos/{owner}/{repo}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Labels>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter name: (path) Name of the label. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoLabelsNameDelete(owner: String, repo: String, name: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoLabelsNameDeleteWithRequestBuilder(owner: owner, repo: repo, name: name, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/labels/{name}
     - Delete a label.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter name: (path) Name of the label. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoLabelsNameDeleteWithRequestBuilder(owner: String, repo: String, name: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/labels/{name}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter name: (path) Name of the label. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoLabelsNameGet(owner: String, repo: String, name: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        reposOwnerRepoLabelsNameGetWithRequestBuilder(owner: owner, repo: repo, name: name, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/labels/{name}
     - Get a single label.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter name: (path) Name of the label. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Label> 
     */
    open class func reposOwnerRepoLabelsNameGetWithRequestBuilder(owner: String, repo: String, name: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels/{name}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Label>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter name: (path) Name of the label. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoLabelsNamePatch(owner: String, repo: String, name: String, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        reposOwnerRepoLabelsNamePatchWithRequestBuilder(owner: owner, repo: repo, name: name, ERROR_UNKNOWN: ERROR_UNKNOWN, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/labels/{name}
     - Update a label.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter name: (path) Name of the label. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Label> 
     */
    open class func reposOwnerRepoLabelsNamePatchWithRequestBuilder(owner: String, repo: String, name: String, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels/{name}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ERROR_UNKNOWN)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Label>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoLabelsPost(owner: String, repo: String, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        reposOwnerRepoLabelsPostWithRequestBuilder(owner: owner, repo: repo, ERROR_UNKNOWN: ERROR_UNKNOWN, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/labels
     - Create a label.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Label> 
     */
    open class func reposOwnerRepoLabelsPostWithRequestBuilder(owner: String, repo: String, ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ERROR_UNKNOWN)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Label>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoLanguagesGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Languages?,_ error: Error?) -> Void)) {
        reposOwnerRepoLanguagesGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/languages
     - List languages. List languages for the specified repository. The value on the right of a language is the number of bytes of code written in that language. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Languages> 
     */
    open class func reposOwnerRepoLanguagesGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Languages> {
        var path = "/repos/{owner}/{repo}/languages"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Languages>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter mergesBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoMergesPost(owner: String, repo: String, mergesBody: MergesBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: MergesSuccessful?,_ error: Error?) -> Void)) {
        reposOwnerRepoMergesPostWithRequestBuilder(owner: owner, repo: repo, mergesBody: mergesBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/merges
     - Perform a merge.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter mergesBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<MergesSuccessful> 
     */
    open class func reposOwnerRepoMergesPostWithRequestBuilder(owner: String, repo: String, mergesBody: MergesBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<MergesSuccessful> {
        var path = "/repos/{owner}/{repo}/merges"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mergesBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MergesSuccessful>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter state
     */
    public enum State_reposOwnerRepoMilestonesGet: String {
        case _open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposOwnerRepoMilestonesGet: String {
        case dueDate = "due_date"
        case completeness = "completeness"
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter state: (query) String to filter by state. (optional, default to "open")
     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional, default to "due_date")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoMilestonesGet(owner: String, repo: String, state: State_reposOwnerRepoMilestonesGet? = nil, direction: String? = nil, sort: Sort_reposOwnerRepoMilestonesGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        reposOwnerRepoMilestonesGetWithRequestBuilder(owner: owner, repo: repo, state: state, direction: direction, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/milestones
     - List milestones for a repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter state: (query) String to filter by state. (optional, default to "open")
     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional, default to "due_date")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Milestone> 
     */
    open class func reposOwnerRepoMilestonesGetWithRequestBuilder(owner: String, repo: String, state: State_reposOwnerRepoMilestonesGet? = nil, direction: String? = nil, sort: Sort_reposOwnerRepoMilestonesGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.rawValue, 
            "direction": direction, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Milestone>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoMilestonesNumberDelete(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoMilestonesNumberDeleteWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/milestones/{number}
     - Delete a milestone.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoMilestonesNumberDeleteWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/milestones/{number}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoMilestonesNumberGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        reposOwnerRepoMilestonesNumberGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/milestones/{number}
     - Get a single milestone.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Milestone> 
     */
    open class func reposOwnerRepoMilestonesNumberGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones/{number}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Milestone>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoMilestonesNumberLabelsGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Labels?,_ error: Error?) -> Void)) {
        reposOwnerRepoMilestonesNumberLabelsGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/milestones/{number}/labels
     - Get labels for every issue in a milestone.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Labels> 
     */
    open class func reposOwnerRepoMilestonesNumberLabelsGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Labels> {
        var path = "/repos/{owner}/{repo}/milestones/{number}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Labels>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter milestoneUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoMilestonesNumberPatch(owner: String, repo: String, number: Int, milestoneUpdate: MilestoneUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        reposOwnerRepoMilestonesNumberPatchWithRequestBuilder(owner: owner, repo: repo, number: number, milestoneUpdate: milestoneUpdate, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/milestones/{number}
     - Update a milestone.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Number of milestone. 
     - parameter milestoneUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Milestone> 
     */
    open class func reposOwnerRepoMilestonesNumberPatchWithRequestBuilder(owner: String, repo: String, number: Int, milestoneUpdate: MilestoneUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones/{number}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: milestoneUpdate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Milestone>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter milestoneUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoMilestonesPost(owner: String, repo: String, milestoneUpdate: MilestoneUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        reposOwnerRepoMilestonesPostWithRequestBuilder(owner: owner, repo: repo, milestoneUpdate: milestoneUpdate, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/milestones
     - Create a milestone.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter milestoneUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Milestone> 
     */
    open class func reposOwnerRepoMilestonesPostWithRequestBuilder(owner: String, repo: String, milestoneUpdate: MilestoneUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: milestoneUpdate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Milestone>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter all: (query) True to show notifications marked as read. (optional)
     - parameter participating: (query) True to show only notifications in which the user is directly participating or mentioned.  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoNotificationsGet(owner: String, repo: String, all: Bool? = nil, participating: Bool? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Notifications?,_ error: Error?) -> Void)) {
        reposOwnerRepoNotificationsGetWithRequestBuilder(owner: owner, repo: repo, all: all, participating: participating, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/notifications
     - List your notifications in a repository List all notifications for the current user. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter all: (query) True to show notifications marked as read. (optional)
     - parameter participating: (query) True to show only notifications in which the user is directly participating or mentioned.  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Notifications> 
     */
    open class func reposOwnerRepoNotificationsGetWithRequestBuilder(owner: String, repo: String, all: Bool? = nil, participating: Bool? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Notifications> {
        var path = "/repos/{owner}/{repo}/notifications"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "participating": participating, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Notifications>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter notificationMarkRead: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoNotificationsPut(owner: String, repo: String, notificationMarkRead: NotificationMarkRead, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoNotificationsPutWithRequestBuilder(owner: owner, repo: repo, notificationMarkRead: notificationMarkRead, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /repos/{owner}/{repo}/notifications
     - Mark notifications as read in a repository. Marking all notifications in a repository as \"read\" removes them from the default view on GitHub.com. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter notificationMarkRead: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoNotificationsPutWithRequestBuilder(owner: String, repo: String, notificationMarkRead: NotificationMarkRead, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/notifications"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationMarkRead)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter repoEdit: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPatch(owner: String, repo: String, repoEdit: RepoEdit, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repo?,_ error: Error?) -> Void)) {
        reposOwnerRepoPatchWithRequestBuilder(owner: owner, repo: repo, repoEdit: repoEdit, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}
     - Edit repository.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter repoEdit: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repo> 
     */
    open class func reposOwnerRepoPatchWithRequestBuilder(owner: String, repo: String, repoEdit: RepoEdit, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repo> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: repoEdit)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repo>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsCommentsCommentIdDelete(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsCommentsCommentIdDeleteWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/pulls/comments/{commentId}
     - Delete a comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoPullsCommentsCommentIdDeleteWithRequestBuilder(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsCommentsCommentIdGet(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: PullsComment?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsCommentsCommentIdGetWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls/comments/{commentId}
     - Get a single comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<PullsComment> 
     */
    open class func reposOwnerRepoPullsCommentsCommentIdGetWithRequestBuilder(owner: String, repo: String, commentId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<PullsComment> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PullsComment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsCommentsCommentIdPatch(owner: String, repo: String, commentId: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: PullsComment?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsCommentsCommentIdPatchWithRequestBuilder(owner: owner, repo: repo, commentId: commentId, commentBody: commentBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/pulls/comments/{commentId}
     - Edit a comment.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter commentId: (path) Id of comment. 
     - parameter commentBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<PullsComment> 
     */
    open class func reposOwnerRepoPullsCommentsCommentIdPatchWithRequestBuilder(owner: String, repo: String, commentId: Int, commentBody: CommentBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<PullsComment> {
        var path = "/repos/{owner}/{repo}/pulls/comments/{commentId}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PullsComment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reposOwnerRepoPullsCommentsGet: String {
        case created = "created"
        case updated = "updated"
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsCommentsGet(owner: String, repo: String, direction: String? = nil, sort: Sort_reposOwnerRepoPullsCommentsGet? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: IssuesComments?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsCommentsGetWithRequestBuilder(owner: owner, repo: repo, direction: direction, sort: sort, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls/comments
     - List comments in a repository. By default, Review Comments are ordered by ascending ID. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional)
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<IssuesComments> 
     */
    open class func reposOwnerRepoPullsCommentsGetWithRequestBuilder(owner: String, repo: String, direction: String? = nil, sort: Sort_reposOwnerRepoPullsCommentsGet? = nil, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<IssuesComments> {
        var path = "/repos/{owner}/{repo}/pulls/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction": direction, 
            "sort": sort?.rawValue, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IssuesComments>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter state
     */
    public enum State_reposOwnerRepoPullsGet: String {
        case _open = "open"
        case closed = "closed"
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter state: (query) String to filter by state. (optional, default to "open")
     - parameter head: (query) Filter pulls by head user and branch name in the format of &#39;user:ref-name&#39;. Example: github:new-script-format.  (optional)
     - parameter base: (query) Filter pulls by base branch name. Example - gh-pages. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsGet(owner: String, repo: String, state: State_reposOwnerRepoPullsGet? = nil, head: String? = nil, base: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Pulls?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsGetWithRequestBuilder(owner: owner, repo: repo, state: state, head: head, base: base, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls
     - List pull requests.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter state: (query) String to filter by state. (optional, default to "open")
     - parameter head: (query) Filter pulls by head user and branch name in the format of &#39;user:ref-name&#39;. Example: github:new-script-format.  (optional)
     - parameter base: (query) Filter pulls by base branch name. Example - gh-pages. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Pulls> 
     */
    open class func reposOwnerRepoPullsGetWithRequestBuilder(owner: String, repo: String, state: State_reposOwnerRepoPullsGet? = nil, head: String? = nil, base: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Pulls> {
        var path = "/repos/{owner}/{repo}/pulls"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": state?.rawValue, 
            "head": head, 
            "base": base
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Pulls>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberCommentsGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: PullsComment?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberCommentsGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls/{number}/comments
     - List comments on a pull request.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<PullsComment> 
     */
    open class func reposOwnerRepoPullsNumberCommentsGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<PullsComment> {
        var path = "/repos/{owner}/{repo}/pulls/{number}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PullsComment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter pullsCommentPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberCommentsPost(owner: String, repo: String, number: Int, pullsCommentPost: PullsCommentPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: PullsComment?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberCommentsPostWithRequestBuilder(owner: owner, repo: repo, number: number, pullsCommentPost: pullsCommentPost, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/pulls/{number}/comments
     - Create a comment.   #TODO Alternative input ( http://developer.github.com/v3/pulls/comments/ )   description: |     Alternative Input.     Instead of passing commit_id, path, and position you can reply to an     existing Pull Request Comment like this:          body            Required string         in_reply_to            Required number - Comment id to reply to. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter pullsCommentPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<PullsComment> 
     */
    open class func reposOwnerRepoPullsNumberCommentsPostWithRequestBuilder(owner: String, repo: String, number: Int, pullsCommentPost: PullsCommentPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<PullsComment> {
        var path = "/repos/{owner}/{repo}/pulls/{number}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pullsCommentPost)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PullsComment>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberCommitsGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Commits?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberCommitsGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls/{number}/commits
     - List commits on a pull request.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Commits> 
     */
    open class func reposOwnerRepoPullsNumberCommitsGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Commits> {
        var path = "/repos/{owner}/{repo}/pulls/{number}/commits"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Commits>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberFilesGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Pulls?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberFilesGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls/{number}/files
     - List pull requests files.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Pulls> 
     */
    open class func reposOwnerRepoPullsNumberFilesGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Pulls> {
        var path = "/repos/{owner}/{repo}/pulls/{number}/files"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Pulls>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: PullRequest?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls/{number}
     - Get a single pull request.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<PullRequest> 
     */
    open class func reposOwnerRepoPullsNumberGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<PullRequest> {
        var path = "/repos/{owner}/{repo}/pulls/{number}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PullRequest>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberMergeGet(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberMergeGetWithRequestBuilder(owner: owner, repo: repo, number: number, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /repos/{owner}/{repo}/pulls/{number}/merge
     - Get if a pull request has been merged.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoPullsNumberMergeGetWithRequestBuilder(owner: String, repo: String, number: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/{number}/merge"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter mergePullBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberMergePut(owner: String, repo: String, number: Int, mergePullBody: MergePullBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Merge?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberMergePutWithRequestBuilder(owner: owner, repo: repo, number: number, mergePullBody: mergePullBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /repos/{owner}/{repo}/pulls/{number}/merge
     - Merge a pull request (Merge Button's)
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter mergePullBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Merge> 
     */
    open class func reposOwnerRepoPullsNumberMergePutWithRequestBuilder(owner: String, repo: String, number: Int, mergePullBody: MergePullBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Merge> {
        var path = "/repos/{owner}/{repo}/pulls/{number}/merge"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mergePullBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Merge>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter pullUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsNumberPatch(owner: String, repo: String, number: Int, pullUpdate: PullUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repo?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsNumberPatchWithRequestBuilder(owner: owner, repo: repo, number: number, pullUpdate: pullUpdate, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/pulls/{number}
     - Update a pull request.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter number: (path) Id of pull. 
     - parameter pullUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repo> 
     */
    open class func reposOwnerRepoPullsNumberPatchWithRequestBuilder(owner: String, repo: String, number: Int, pullUpdate: PullUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repo> {
        var path = "/repos/{owner}/{repo}/pulls/{number}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let numberPreEscape = "\(number)"
        let numberPostEscape = numberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{number}", with: numberPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pullUpdate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repo>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter pullsPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoPullsPost(owner: String, repo: String, pullsPost: PullsPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Pulls?,_ error: Error?) -> Void)) {
        reposOwnerRepoPullsPostWithRequestBuilder(owner: owner, repo: repo, pullsPost: pullsPost, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/pulls
     - Create a pull request.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter pullsPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Pulls> 
     */
    open class func reposOwnerRepoPullsPostWithRequestBuilder(owner: String, repo: String, pullsPost: PullsPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Pulls> {
        var path = "/repos/{owner}/{repo}/pulls"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pullsPost)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Pulls>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (query) The String name of the Commit/Branch/Tag. Defaults to master. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReadmeGet(owner: String, repo: String, ref: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: ContentsPath?,_ error: Error?) -> Void)) {
        reposOwnerRepoReadmeGetWithRequestBuilder(owner: owner, repo: repo, ref: ref, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/readme
     - Get the README. This method returns the preferred README for a repository. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (query) The String name of the Commit/Branch/Tag. Defaults to master. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<ContentsPath> 
     */
    open class func reposOwnerRepoReadmeGetWithRequestBuilder(owner: String, repo: String, ref: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<ContentsPath> {
        var path = "/repos/{owner}/{repo}/readme"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ref": ref
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ContentsPath>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesAssetsIdDelete(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesAssetsIdDeleteWithRequestBuilder(owner: owner, repo: repo, _id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/releases/assets/{id}
     - Delete a release asset
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoReleasesAssetsIdDeleteWithRequestBuilder(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/releases/assets/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesAssetsIdGet(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Asset?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesAssetsIdGetWithRequestBuilder(owner: owner, repo: repo, _id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/releases/assets/{id}
     - Get a single release asset
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Asset> 
     */
    open class func reposOwnerRepoReleasesAssetsIdGetWithRequestBuilder(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Asset> {
        var path = "/repos/{owner}/{repo}/releases/assets/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Asset>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter assetPatch: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesAssetsIdPatch(owner: String, repo: String, _id: String, assetPatch: AssetPatch, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Asset?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesAssetsIdPatchWithRequestBuilder(owner: owner, repo: repo, _id: _id, assetPatch: assetPatch, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/releases/assets/{id}
     - Edit a release asset Users with push access to the repository can edit a release asset. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter assetPatch: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Asset> 
     */
    open class func reposOwnerRepoReleasesAssetsIdPatchWithRequestBuilder(owner: String, repo: String, _id: String, assetPatch: AssetPatch, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Asset> {
        var path = "/repos/{owner}/{repo}/releases/assets/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetPatch)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Asset>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Releases?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/releases
     - Users with push access to the repository will receive all releases (i.e., published releases and draft releases). Users with pull access will receive published releases only
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Releases> 
     */
    open class func reposOwnerRepoReleasesGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Releases> {
        var path = "/repos/{owner}/{repo}/releases"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Releases>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesIdAssetsGet(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Assets?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesIdAssetsGetWithRequestBuilder(owner: owner, repo: repo, _id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/releases/{id}/assets
     - List assets for a release
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Assets> 
     */
    open class func reposOwnerRepoReleasesIdAssetsGetWithRequestBuilder(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Assets> {
        var path = "/repos/{owner}/{repo}/releases/{id}/assets"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Assets>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesIdDelete(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesIdDeleteWithRequestBuilder(owner: owner, repo: repo, _id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/releases/{id}
     - Users with push access to the repository can delete a release.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoReleasesIdDeleteWithRequestBuilder(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/releases/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesIdGet(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesIdGetWithRequestBuilder(owner: owner, repo: repo, _id: _id, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/releases/{id}
     - Get a single release
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Release> 
     */
    open class func reposOwnerRepoReleasesIdGetWithRequestBuilder(owner: String, repo: String, _id: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Release>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter releaseCreate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesIdPatch(owner: String, repo: String, _id: String, releaseCreate: ReleaseCreate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesIdPatchWithRequestBuilder(owner: owner, repo: repo, _id: _id, releaseCreate: releaseCreate, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /repos/{owner}/{repo}/releases/{id}
     - Users with push access to the repository can edit a release
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter _id: (path)  
     - parameter releaseCreate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Release> 
     */
    open class func reposOwnerRepoReleasesIdPatchWithRequestBuilder(owner: String, repo: String, _id: String, releaseCreate: ReleaseCreate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releaseCreate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Release>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter releaseCreate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoReleasesPost(owner: String, repo: String, releaseCreate: ReleaseCreate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        reposOwnerRepoReleasesPostWithRequestBuilder(owner: owner, repo: repo, releaseCreate: releaseCreate, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/releases
     - Create a release Users with push access to the repository can create a release. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter releaseCreate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Release> 
     */
    open class func reposOwnerRepoReleasesPostWithRequestBuilder(owner: String, repo: String, releaseCreate: ReleaseCreate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: releaseCreate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Release>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStargazersGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        reposOwnerRepoStargazersGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/stargazers
     - List Stargazers.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func reposOwnerRepoStargazersGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/repos/{owner}/{repo}/stargazers"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStatsCodeFrequencyGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CodeFrequencyStats?,_ error: Error?) -> Void)) {
        reposOwnerRepoStatsCodeFrequencyGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/stats/code_frequency
     - Get the number of additions and deletions per week. Returns a weekly aggregate of the number of additions and deletions pushed to a repository. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CodeFrequencyStats> 
     */
    open class func reposOwnerRepoStatsCodeFrequencyGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CodeFrequencyStats> {
        var path = "/repos/{owner}/{repo}/stats/code_frequency"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CodeFrequencyStats>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStatsCommitActivityGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CommitActivityStats?,_ error: Error?) -> Void)) {
        reposOwnerRepoStatsCommitActivityGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/stats/commit_activity
     - Get the last year of commit activity data. Returns the last year of commit activity grouped by week. The days array is a group of commits per day, starting on Sunday. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CommitActivityStats> 
     */
    open class func reposOwnerRepoStatsCommitActivityGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CommitActivityStats> {
        var path = "/repos/{owner}/{repo}/stats/commit_activity"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommitActivityStats>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStatsContributorsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: ContributorsStats?,_ error: Error?) -> Void)) {
        reposOwnerRepoStatsContributorsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/stats/contributors
     - Get contributors list with additions, deletions, and commit counts.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<ContributorsStats> 
     */
    open class func reposOwnerRepoStatsContributorsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<ContributorsStats> {
        var path = "/repos/{owner}/{repo}/stats/contributors"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ContributorsStats>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStatsParticipationGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: ParticipationStats?,_ error: Error?) -> Void)) {
        reposOwnerRepoStatsParticipationGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/stats/participation
     - Get the weekly commit count for the repo owner and everyone else.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<ParticipationStats> 
     */
    open class func reposOwnerRepoStatsParticipationGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<ParticipationStats> {
        var path = "/repos/{owner}/{repo}/stats/participation"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ParticipationStats>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStatsPunchCardGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: CodeFrequencyStats?,_ error: Error?) -> Void)) {
        reposOwnerRepoStatsPunchCardGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/stats/punch_card
     - Get the number of commits per hour in each day. Each array contains the day number, hour number, and number of commits 0-6 Sunday - Saturday 0-23 Hour of day Number of commits  For example, [2, 14, 25] indicates that there were 25 total commits, during the 2.00pm hour on Tuesdays. All times are based on the time zone of individual commits. 
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<CodeFrequencyStats> 
     */
    open class func reposOwnerRepoStatsPunchCardGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<CodeFrequencyStats> {
        var path = "/repos/{owner}/{repo}/stats/punch_card"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CodeFrequencyStats>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path) Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStatusesRefGet(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Ref?,_ error: Error?) -> Void)) {
        reposOwnerRepoStatusesRefGetWithRequestBuilder(owner: owner, repo: repo, ref: ref, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/statuses/{ref}
     - List Statuses for a specific Ref.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path) Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Ref> 
     */
    open class func reposOwnerRepoStatusesRefGetWithRequestBuilder(owner: String, repo: String, ref: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Ref> {
        var path = "/repos/{owner}/{repo}/statuses/{ref}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Ref>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path) Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.  
     - parameter headBranch: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoStatusesRefPost(owner: String, repo: String, ref: String, headBranch: HeadBranch, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Ref?,_ error: Error?) -> Void)) {
        reposOwnerRepoStatusesRefPostWithRequestBuilder(owner: owner, repo: repo, ref: ref, headBranch: headBranch, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /repos/{owner}/{repo}/statuses/{ref}
     - Create a Status.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter ref: (path) Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.  
     - parameter headBranch: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Ref> 
     */
    open class func reposOwnerRepoStatusesRefPostWithRequestBuilder(owner: String, repo: String, ref: String, headBranch: HeadBranch, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Ref> {
        var path = "/repos/{owner}/{repo}/statuses/{ref}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: headBranch)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Ref>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoSubscribersGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        reposOwnerRepoSubscribersGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/subscribers
     - List watchers.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func reposOwnerRepoSubscribersGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/repos/{owner}/{repo}/subscribers"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoSubscriptionDelete(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reposOwnerRepoSubscriptionDeleteWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /repos/{owner}/{repo}/subscription
     - Delete a Repository Subscription.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reposOwnerRepoSubscriptionDeleteWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/subscription"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoSubscriptionGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Subscribition?,_ error: Error?) -> Void)) {
        reposOwnerRepoSubscriptionGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/subscription
     - Get a Repository Subscription.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Subscribition> 
     */
    open class func reposOwnerRepoSubscriptionGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Subscribition> {
        var path = "/repos/{owner}/{repo}/subscription"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subscribition>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter subscribitionBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoSubscriptionPut(owner: String, repo: String, subscribitionBody: SubscribitionBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Subscribition?,_ error: Error?) -> Void)) {
        reposOwnerRepoSubscriptionPutWithRequestBuilder(owner: owner, repo: repo, subscribitionBody: subscribitionBody, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /repos/{owner}/{repo}/subscription
     - Set a Repository Subscription
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter subscribitionBody: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Subscribition> 
     */
    open class func reposOwnerRepoSubscriptionPutWithRequestBuilder(owner: String, repo: String, subscribitionBody: SubscribitionBody, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Subscribition> {
        var path = "/repos/{owner}/{repo}/subscription"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscribitionBody)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subscribition>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoTagsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Tags?,_ error: Error?) -> Void)) {
        reposOwnerRepoTagsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/tags
     - Get list of tags.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Tags> 
     */
    open class func reposOwnerRepoTagsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Tags> {
        var path = "/repos/{owner}/{repo}/tags"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tags>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoTeamsGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Teams?,_ error: Error?) -> Void)) {
        reposOwnerRepoTeamsGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/teams
     - Get list of teams
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Teams> 
     */
    open class func reposOwnerRepoTeamsGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Teams> {
        var path = "/repos/{owner}/{repo}/teams"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Teams>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reposOwnerRepoWatchersGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        reposOwnerRepoWatchersGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repos/{owner}/{repo}/watchers
     - List Stargazers. New implementation.
     - parameter owner: (path) Name of repository owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func reposOwnerRepoWatchersGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/repos/{owner}/{repo}/watchers"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repositoriesGet(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repositories?,_ error: Error?) -> Void)) {
        repositoriesGetWithRequestBuilder(since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /repositories
     - List all public repositories. This provides a dump of every public repository, in the order that they were created. Note: Pagination is powered exclusively by the since parameter. is the Link header to get the URL for the next page of repositories. 
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repositories> 
     */
    open class func repositoriesGetWithRequestBuilder(since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repositories> {
        let path = "/repositories"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repositories>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_searchCodeGet: String {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_searchCodeGet: String {
        case indexed = "indexed"
    }

    /**

     - parameter q: (query) The search terms. This can be any combination of the supported code search parameters: &#39;Search In&#39; Qualifies which fields are searched. With this qualifier you can restrict the search to just the file contents, the file path, or both. &#39;Languages&#39; Searches code based on the language it&#39;s written in. &#39;Forks&#39; Filters repositories based on the number of forks, and/or whether code from forked repositories should be included in the results at all. &#39;Size&#39; Finds files that match a certain size (in bytes). &#39;Path&#39; Specifies the path that the resulting file must be at. &#39;Extension&#39; Matches files with a certain extension. &#39;Users&#39; or &#39;Repositories&#39; Limits searches to a specific user or repository.  
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) Can only be &#39;indexed&#39;, which indicates how recently a file has been indexed by the GitHub search infrastructure. If not provided, results are sorted by best match.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchCodeGet(q: String, order: Order_searchCodeGet? = nil, sort: Sort_searchCodeGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchCode?,_ error: Error?) -> Void)) {
        searchCodeGetWithRequestBuilder(q: q, order: order, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /search/code
     - Search code.
     - parameter q: (query) The search terms. This can be any combination of the supported code search parameters: &#39;Search In&#39; Qualifies which fields are searched. With this qualifier you can restrict the search to just the file contents, the file path, or both. &#39;Languages&#39; Searches code based on the language it&#39;s written in. &#39;Forks&#39; Filters repositories based on the number of forks, and/or whether code from forked repositories should be included in the results at all. &#39;Size&#39; Finds files that match a certain size (in bytes). &#39;Path&#39; Specifies the path that the resulting file must be at. &#39;Extension&#39; Matches files with a certain extension. &#39;Users&#39; or &#39;Repositories&#39; Limits searches to a specific user or repository.  
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) Can only be &#39;indexed&#39;, which indicates how recently a file has been indexed by the GitHub search infrastructure. If not provided, results are sorted by best match.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchCode> 
     */
    open class func searchCodeGetWithRequestBuilder(q: String, order: Order_searchCodeGet? = nil, sort: Sort_searchCodeGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchCode> {
        let path = "/search/code"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order?.rawValue, 
            "q": q, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchCode>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_searchIssuesGet: String {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_searchIssuesGet: String {
        case updated = "updated"
        case created = "created"
        case comments = "comments"
    }

    /**

     - parameter q: (query) The q search term can also contain any combination of the supported issue search qualifiers: 
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) The sort field. Can be comments, created, or updated. Default: results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchIssuesGet(q: String, order: Order_searchIssuesGet? = nil, sort: Sort_searchIssuesGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchIssues?,_ error: Error?) -> Void)) {
        searchIssuesGetWithRequestBuilder(q: q, order: order, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /search/issues
     - Find issues by state and keyword. (This method returns up to 100 results per page.)
     - parameter q: (query) The q search term can also contain any combination of the supported issue search qualifiers: 
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) The sort field. Can be comments, created, or updated. Default: results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchIssues> 
     */
    open class func searchIssuesGetWithRequestBuilder(q: String, order: Order_searchIssuesGet? = nil, sort: Sort_searchIssuesGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchIssues> {
        let path = "/search/issues"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order?.rawValue, 
            "q": q, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchIssues>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_searchRepositoriesGet: String {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_searchRepositoriesGet: String {
        case stars = "stars"
        case forks = "forks"
        case updated = "updated"
    }

    /**

     - parameter q: (query) The search terms. This can be any combination of the supported repository search parameters: &#39;Search In&#39; Qualifies which fields are searched. With this qualifier you can restrict the search to just the repository name, description, readme, or any combination of these. &#39;Size&#39; Finds repositories that match a certain size (in kilobytes). &#39;Forks&#39; Filters repositories based on the number of forks, and/or whether forked repositories should be included in the results at all. &#39;Created&#39; and &#39;Last Updated&#39; Filters repositories based on times of creation, or when they were last updated. &#39;Users or Repositories&#39; Limits searches to a specific user or repository. &#39;Languages&#39; Searches repositories based on the language they are written in. &#39;Stars&#39; Searches repositories based on the number of stars.  
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) If not provided, results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchRepositoriesGet(q: String, order: Order_searchRepositoriesGet? = nil, sort: Sort_searchRepositoriesGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchRepositories?,_ error: Error?) -> Void)) {
        searchRepositoriesGetWithRequestBuilder(q: q, order: order, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /search/repositories
     - Search repositories.
     - parameter q: (query) The search terms. This can be any combination of the supported repository search parameters: &#39;Search In&#39; Qualifies which fields are searched. With this qualifier you can restrict the search to just the repository name, description, readme, or any combination of these. &#39;Size&#39; Finds repositories that match a certain size (in kilobytes). &#39;Forks&#39; Filters repositories based on the number of forks, and/or whether forked repositories should be included in the results at all. &#39;Created&#39; and &#39;Last Updated&#39; Filters repositories based on times of creation, or when they were last updated. &#39;Users or Repositories&#39; Limits searches to a specific user or repository. &#39;Languages&#39; Searches repositories based on the language they are written in. &#39;Stars&#39; Searches repositories based on the number of stars.  
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) If not provided, results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchRepositories> 
     */
    open class func searchRepositoriesGetWithRequestBuilder(q: String, order: Order_searchRepositoriesGet? = nil, sort: Sort_searchRepositoriesGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchRepositories> {
        let path = "/search/repositories"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order?.rawValue, 
            "q": q, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchRepositories>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_searchUsersGet: String {
        case desc = "desc"
        case asc = "asc"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_searchUsersGet: String {
        case followers = "followers"
        case repositories = "repositories"
        case joined = "joined"
    }

    /**

     - parameter q: (query) The search terms. This can be any combination of the supported user search parameters: &#39;Search In&#39; Qualifies which fields are searched. With this qualifier you can restrict the search to just the username, public email, full name, location, or any combination of these. &#39;Repository count&#39; Filters users based on the number of repositories they have. &#39;Location&#39; Filter users by the location indicated in their profile. &#39;Language&#39; Search for users that have repositories that match a certain language. &#39;Created&#39; Filter users based on when they joined. &#39;Followers&#39; Filter users based on the number of followers they have.  
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) If not provided, results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchUsersGet(q: String, order: Order_searchUsersGet? = nil, sort: Sort_searchUsersGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: SearchUsers?,_ error: Error?) -> Void)) {
        searchUsersGetWithRequestBuilder(q: q, order: order, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /search/users
     - Search users.
     - parameter q: (query) The search terms. This can be any combination of the supported user search parameters: &#39;Search In&#39; Qualifies which fields are searched. With this qualifier you can restrict the search to just the username, public email, full name, location, or any combination of these. &#39;Repository count&#39; Filters users based on the number of repositories they have. &#39;Location&#39; Filter users by the location indicated in their profile. &#39;Language&#39; Search for users that have repositories that match a certain language. &#39;Created&#39; Filter users based on when they joined. &#39;Followers&#39; Filter users based on the number of followers they have.  
     - parameter order: (query) The sort field. if sort param is provided. Can be either asc or desc. (optional, default to "desc")
     - parameter sort: (query) If not provided, results are sorted by best match. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<SearchUsers> 
     */
    open class func searchUsersGetWithRequestBuilder(q: String, order: Order_searchUsersGet? = nil, sort: Sort_searchUsersGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<SearchUsers> {
        let path = "/search/users"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order?.rawValue, 
            "q": q, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchUsers>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdDelete(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdDeleteWithRequestBuilder(teamId: teamId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /teams/{teamId}
     - Delete team. In order to delete a team, the authenticated user must be an owner of the org that the team is associated with. 
     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdDeleteWithRequestBuilder(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdGet(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        teamsTeamIdGetWithRequestBuilder(teamId: teamId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /teams/{teamId}
     - Get team.
     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Team> 
     */
    open class func teamsTeamIdGetWithRequestBuilder(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Team> {
        var path = "/teams/{teamId}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdMembersGet(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        teamsTeamIdMembersGetWithRequestBuilder(teamId: teamId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /teams/{teamId}/members
     - List team members. In order to list members in a team, the authenticated user must be a member of the team. 
     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func teamsTeamIdMembersGetWithRequestBuilder(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/teams/{teamId}/members"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdMembersUsernameDelete(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdMembersUsernameDeleteWithRequestBuilder(teamId: teamId, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /teams/{teamId}/members/{username}
     - The \"Remove team member\" API is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Remove team membership API instead. It allows you to remove both active and pending memberships.  Remove team member. In order to remove a user from a team, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. NOTE This does not delete the user, it just remove them from the team. 
     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdMembersUsernameDeleteWithRequestBuilder(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}/members/{username}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdMembersUsernameGet(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdMembersUsernameGetWithRequestBuilder(teamId: teamId, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /teams/{teamId}/members/{username}
     - The \"Get team member\" API is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Get team membership API instead. It allows you to get both active and pending memberships.  Get team member. In order to get if a user is a member of a team, the authenticated user mus be a member of the team. 
     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdMembersUsernameGetWithRequestBuilder(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}/members/{username}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdMembersUsernamePut(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdMembersUsernamePutWithRequestBuilder(teamId: teamId, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /teams/{teamId}/members/{username}
     - The API (described below) is deprecated and is scheduled for removal in the next major version of the API. We recommend using the Add team membership API instead. It allows you to invite new organization members to your teams.  Add team member. In order to add a user to a team, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. 
     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdMembersUsernamePutWithRequestBuilder(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}/members/{username}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdMembershipsUsernameDelete(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdMembershipsUsernameDeleteWithRequestBuilder(teamId: teamId, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /teams/{teamId}/memberships/{username}
     - Remove team membership. In order to remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. NOTE: This does not delete the user, it just removes their membership from the team. 
     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdMembershipsUsernameDeleteWithRequestBuilder(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}/memberships/{username}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdMembershipsUsernameGet(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: TeamMembership?,_ error: Error?) -> Void)) {
        teamsTeamIdMembershipsUsernameGetWithRequestBuilder(teamId: teamId, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /teams/{teamId}/memberships/{username}
     - Get team membership. In order to get a user's membership with a team, the authenticated user must be a member of the team or an owner of the team's organization. 
     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<TeamMembership> 
     */
    open class func teamsTeamIdMembershipsUsernameGetWithRequestBuilder(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<TeamMembership> {
        var path = "/teams/{teamId}/memberships/{username}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TeamMembership>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdMembershipsUsernamePut(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: TeamMembership?,_ error: Error?) -> Void)) {
        teamsTeamIdMembershipsUsernamePutWithRequestBuilder(teamId: teamId, username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /teams/{teamId}/memberships/{username}
     - Add team membership. In order to add a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with.  If the user is already a part of the team's organization (meaning they're on at least one other team in the organization), this endpoint will add the user to the team.  If the user is completely unaffiliated with the team's organization (meaning they're on none of the organization's teams), this endpoint will send an invitation to the user via email. This newly-created membership will be in the 'pending' state until the user accepts the invitation, at which point the membership will transition to the 'active' state and the user will be added as a member of the team. 
     - parameter teamId: (path) Id of team. 
     - parameter username: (path) Name of a member. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<TeamMembership> 
     */
    open class func teamsTeamIdMembershipsUsernamePutWithRequestBuilder(teamId: Int, username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<TeamMembership> {
        var path = "/teams/{teamId}/memberships/{username}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TeamMembership>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter editTeam: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdPatch(teamId: Int, editTeam: EditTeam, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        teamsTeamIdPatchWithRequestBuilder(teamId: teamId, editTeam: editTeam, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /teams/{teamId}
     - Edit team. In order to edit a team, the authenticated user must be an owner of the org that the team is associated with. 
     - parameter teamId: (path) Id of team. 
     - parameter editTeam: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Team> 
     */
    open class func teamsTeamIdPatchWithRequestBuilder(teamId: Int, editTeam: EditTeam, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Team> {
        var path = "/teams/{teamId}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: editTeam)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdReposGet(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: TeamRepos?,_ error: Error?) -> Void)) {
        teamsTeamIdReposGetWithRequestBuilder(teamId: teamId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /teams/{teamId}/repos
     - List team repos
     - parameter teamId: (path) Id of team. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<TeamRepos> 
     */
    open class func teamsTeamIdReposGetWithRequestBuilder(teamId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<TeamRepos> {
        var path = "/teams/{teamId}/repos"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TeamRepos>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter org: (path) Name of a organization. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdReposOrgRepoPut(teamId: Int, org: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdReposOrgRepoPutWithRequestBuilder(teamId: teamId, org: org, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /teams/{teamId}/repos/{org}/{repo}
     - In order to add a repository to a team, the authenticated user must be an owner of the org that the team is associated with. Also, the repository must be owned by the organization, or a direct fork of a repository owned by the organization.
     - parameter teamId: (path) Id of team. 
     - parameter org: (path) Name of a organization. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdReposOrgRepoPutWithRequestBuilder(teamId: Int, org: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}/repos/{org}/{repo}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdReposOwnerRepoDelete(teamId: Int, owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdReposOwnerRepoDeleteWithRequestBuilder(teamId: teamId, owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /teams/{teamId}/repos/{owner}/{repo}
     - In order to remove a repository from a team, the authenticated user must be an owner of the org that the team is associated with. NOTE: This does not delete the repository, it just removes it from the team.
     - parameter teamId: (path) Id of team. 
     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdReposOwnerRepoDeleteWithRequestBuilder(teamId: Int, owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}/repos/{owner}/{repo}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter teamId: (path) Id of team. 
     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func teamsTeamIdReposOwnerRepoGet(teamId: Int, owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        teamsTeamIdReposOwnerRepoGetWithRequestBuilder(teamId: teamId, owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /teams/{teamId}/repos/{owner}/{repo}
     - Check if a team manages a repository
     - parameter teamId: (path) Id of team. 
     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func teamsTeamIdReposOwnerRepoGetWithRequestBuilder(teamId: Int, owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/teams/{teamId}/repos/{owner}/{repo}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userEmailsDelete(ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userEmailsDeleteWithRequestBuilder(ERROR_UNKNOWN: ERROR_UNKNOWN, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /user/emails
     - Delete email address(es). You can include a single email address or an array of addresses. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userEmailsDeleteWithRequestBuilder(ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        let path = "/user/emails"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ERROR_UNKNOWN)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userEmailsGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: UserEmails?,_ error: Error?) -> Void)) {
        userEmailsGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/emails
     - List email addresses for a user. In the final version of the API, this method will return an array of hashes with extended information for each email address indicating if the address has been verified and if it's primary email address for GitHub. Until API v3 is finalized, use the application/vnd.github.v3 media type to get other response format. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<UserEmails> 
     */
    open class func userEmailsGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<UserEmails> {
        let path = "/user/emails"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserEmails>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userEmailsPost(ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userEmailsPostWithRequestBuilder(ERROR_UNKNOWN: ERROR_UNKNOWN, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /user/emails
     - Add email address(es). You can post a single email address or an array of addresses. 
     - parameter ERROR_UNKNOWN: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userEmailsPostWithRequestBuilder(ERROR_UNKNOWN: [String], xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        let path = "/user/emails"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ERROR_UNKNOWN)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userFollowersGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        userFollowersGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/followers
     - List the authenticated user's followers
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func userFollowersGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        let path = "/user/followers"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userFollowingGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        userFollowingGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/following
     - List who the authenticated user is following.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func userFollowingGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        let path = "/user/following"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userFollowingUsernameDelete(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userFollowingUsernameDeleteWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /user/following/{username}
     - Unfollow a user. Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the user:follow scope. 
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userFollowingUsernameDeleteWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/following/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userFollowingUsernameGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userFollowingUsernameGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /user/following/{username}
     - Check if you are following a user.
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userFollowingUsernameGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/following/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userFollowingUsernamePut(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userFollowingUsernamePutWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /user/following/{username}
     - Follow a user. Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the user:follow scope. 
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userFollowingUsernamePutWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/following/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user
     - Get the authenticated user.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<User> 
     */
    open class func userGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<User> {
        let path = "/user"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_userIssuesGet: String {
        case assigned = "assigned"
        case created = "created"
        case mentioned = "mentioned"
        case subscribed = "subscribed"
        case all = "all"
    }

    /**
     * enum for parameter state
     */
    public enum State_userIssuesGet: String {
        case _open = "open"
        case closed = "closed"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_userIssuesGet: String {
        case created = "created"
        case updated = "updated"
        case comments = "comments"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_userIssuesGet: String {
        case asc = "asc"
        case desc = "desc"
    }

    /**

     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userIssuesGet(filter: Filter_userIssuesGet, state: State_userIssuesGet, labels: String, sort: Sort_userIssuesGet, direction: Direction_userIssuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Issues?,_ error: Error?) -> Void)) {
        userIssuesGetWithRequestBuilder(filter: filter, state: state, labels: labels, sort: sort, direction: direction, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/issues
     - List issues. List all issues across owned and member repositories for the authenticated user. 
     - parameter filter: (query) Issues assigned to you / created by you / mentioning you / you&#39;re subscribed to updates for / All issues the authenticated user can see  
     - parameter state: (query)  
     - parameter labels: (query) String list of comma separated Label names. Example - bug,ui,@high. 
     - parameter sort: (query)  
     - parameter direction: (query)  
     - parameter since: (query) Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only issues updated at or after this time are returned.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Issues> 
     */
    open class func userIssuesGetWithRequestBuilder(filter: Filter_userIssuesGet, state: State_userIssuesGet, labels: String, sort: Sort_userIssuesGet, direction: Direction_userIssuesGet, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Issues> {
        let path = "/user/issues"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter.rawValue, 
            "state": state.rawValue, 
            "labels": labels, 
            "sort": sort.rawValue, 
            "direction": direction.rawValue, 
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Issues>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userKeysGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gitignore?,_ error: Error?) -> Void)) {
        userKeysGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/keys
     - List your public keys. Lists the current user's keys. Management of public keys via the API requires that you are authenticated through basic auth, or OAuth with the 'user', 'write:public_key' scopes. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gitignore> 
     */
    open class func userKeysGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gitignore> {
        let path = "/user/keys"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gitignore>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter keyId: (path) ID of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userKeysKeyIdDelete(keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userKeysKeyIdDeleteWithRequestBuilder(keyId: keyId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /user/keys/{keyId}
     - Delete a public key. Removes a public key. Requires that you are authenticated via Basic Auth or via OAuth with at least admin:public_key scope.
     - parameter keyId: (path) ID of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userKeysKeyIdDeleteWithRequestBuilder(keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/keys/{keyId}"
        let keyIdPreEscape = "\(keyId)"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter keyId: (path) ID of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userKeysKeyIdGet(keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: UserKeysKeyId?,_ error: Error?) -> Void)) {
        userKeysKeyIdGetWithRequestBuilder(keyId: keyId, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/keys/{keyId}
     - Get a single public key.
     - parameter keyId: (path) ID of key. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<UserKeysKeyId> 
     */
    open class func userKeysKeyIdGetWithRequestBuilder(keyId: Int, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<UserKeysKeyId> {
        var path = "/user/keys/{keyId}"
        let keyIdPreEscape = "\(keyId)"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserKeysKeyId>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userKeysPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userKeysPost(userKeysPost: UserKeysPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: UserKeysKeyId?,_ error: Error?) -> Void)) {
        userKeysPostWithRequestBuilder(userKeysPost: userKeysPost, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /user/keys
     - Create a public key.
     - parameter userKeysPost: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<UserKeysKeyId> 
     */
    open class func userKeysPostWithRequestBuilder(userKeysPost: UserKeysPost, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<UserKeysKeyId> {
        let path = "/user/keys"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userKeysPost)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserKeysKeyId>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userOrgsGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gitignore?,_ error: Error?) -> Void)) {
        userOrgsGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/orgs
     - List public and private organizations for the authenticated user.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gitignore> 
     */
    open class func userOrgsGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gitignore> {
        let path = "/user/orgs"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gitignore>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userPatch(userUpdate: UserUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userPatchWithRequestBuilder(userUpdate: userUpdate, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /user
     - Update the authenticated user.
     - parameter userUpdate: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<User> 
     */
    open class func userPatchWithRequestBuilder(userUpdate: UserUpdate, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<User> {
        let path = "/user"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_userReposGet: String {
        case all = "all"
        case _public = "public"
        case _private = "private"
        case forks = "forks"
        case sources = "sources"
        case member = "member"
    }

    /**

     - parameter type: (query)  (optional, default to "all")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userReposGet(type: ModelType_userReposGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repos?,_ error: Error?) -> Void)) {
        userReposGetWithRequestBuilder(type: type, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/repos
     - List repositories for the authenticated user. Note that this does not include repositories owned by organizations which the user can access. You can lis user organizations and list organization repositories separately. 
     - parameter type: (query)  (optional, default to "all")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repos> 
     */
    open class func userReposGetWithRequestBuilder(type: ModelType_userReposGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repos> {
        let path = "/user/repos"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repos>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter postRepo: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userReposPost(postRepo: PostRepo, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repos?,_ error: Error?) -> Void)) {
        userReposPostWithRequestBuilder(postRepo: postRepo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /user/repos
     - Create a new repository for the authenticated user. OAuth users must supply repo scope. 
     - parameter postRepo: (body)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repos> 
     */
    open class func userReposPostWithRequestBuilder(postRepo: PostRepo, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repos> {
        let path = "/user/repos"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postRepo)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repos>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_userStarredGet: String {
        case created = "created"
        case updated = "updated"
    }

    /**

     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional, default to "created")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userStarredGet(direction: String? = nil, sort: Sort_userStarredGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gitignore?,_ error: Error?) -> Void)) {
        userStarredGetWithRequestBuilder(direction: direction, sort: sort, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/starred
     - List repositories being starred by the authenticated user.
     - parameter direction: (query) Ignored without &#39;sort&#39; parameter. (optional)
     - parameter sort: (query)  (optional, default to "created")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gitignore> 
     */
    open class func userStarredGetWithRequestBuilder(direction: String? = nil, sort: Sort_userStarredGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gitignore> {
        let path = "/user/starred"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction": direction, 
            "sort": sort?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gitignore>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userStarredOwnerRepoDelete(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userStarredOwnerRepoDeleteWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /user/starred/{owner}/{repo}
     - Unstar a repository
     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userStarredOwnerRepoDeleteWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/starred/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userStarredOwnerRepoGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userStarredOwnerRepoGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /user/starred/{owner}/{repo}
     - Check if you are starring a repository.
     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userStarredOwnerRepoGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/starred/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userStarredOwnerRepoPut(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userStarredOwnerRepoPutWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /user/starred/{owner}/{repo}
     - Star a repository.
     - parameter owner: (path) Name of a repository owner. 
     - parameter repo: (path) Name of a repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userStarredOwnerRepoPutWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/starred/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSubscriptionsGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: UserUserIdSubscribitions?,_ error: Error?) -> Void)) {
        userSubscriptionsGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/subscriptions
     - List repositories being watched by the authenticated user.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<UserUserIdSubscribitions> 
     */
    open class func userSubscriptionsGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<UserUserIdSubscribitions> {
        let path = "/user/subscriptions"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserUserIdSubscribitions>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSubscriptionsOwnerRepoDelete(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userSubscriptionsOwnerRepoDeleteWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /user/subscriptions/{owner}/{repo}
     - Stop watching a repository
     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userSubscriptionsOwnerRepoDeleteWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/subscriptions/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSubscriptionsOwnerRepoGet(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userSubscriptionsOwnerRepoGetWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /user/subscriptions/{owner}/{repo}
     - Check if you are watching a repository.
     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userSubscriptionsOwnerRepoGetWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/subscriptions/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSubscriptionsOwnerRepoPut(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userSubscriptionsOwnerRepoPutWithRequestBuilder(owner: owner, repo: repo, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /user/subscriptions/{owner}/{repo}
     - Watch a repository.
     - parameter owner: (path) Name of the owner. 
     - parameter repo: (path) Name of repository. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userSubscriptionsOwnerRepoPutWithRequestBuilder(owner: String, repo: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/user/subscriptions/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userTeamsGet(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: TeamsList?,_ error: Error?) -> Void)) {
        userTeamsGetWithRequestBuilder(xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /user/teams
     - List all of the teams across all of the organizations to which the authenticated user belongs. This method requires user or repo scope when authenticating via OAuth.
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<TeamsList> 
     */
    open class func userTeamsGetWithRequestBuilder(xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<TeamsList> {
        let path = "/user/teams"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TeamsList>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter since: (query) The integer ID of the last User that you&#39;ve seen. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGet(since: Int? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        usersGetWithRequestBuilder(since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users
     - Get all users. This provides a dump of every user, in the order that they signed up for GitHub. Note: Pagination is powered exclusively by the since parameter. Use the Link header to get the URL for the next page of users. 
     - parameter since: (query) The integer ID of the last User that you&#39;ve seen. (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func usersGetWithRequestBuilder(since: Int? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        let path = "/users"
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameEventsGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersUsernameEventsGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /users/{username}/events
     - If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersUsernameEventsGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/events"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter org: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameEventsOrgsOrgGet(username: String, org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersUsernameEventsOrgsOrgGetWithRequestBuilder(username: username, org: org, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /users/{username}/events/orgs/{org}
     - This is the user's organization dashboard. You must be authenticated as the user to view this.
     - parameter username: (path) Name of user. 
     - parameter org: (path)  
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersUsernameEventsOrgsOrgGetWithRequestBuilder(username: String, org: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/events/orgs/{org}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameFollowersGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        usersUsernameFollowersGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{username}/followers
     - List a user's followers
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func usersUsernameFollowersGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/users/{username}/followers"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter targetUser: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameFollowingTargetUserGet(username: String, targetUser: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersUsernameFollowingTargetUserGetWithRequestBuilder(username: username, targetUser: targetUser, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /users/{username}/following/{targetUser}
     - Check if one user follows another.
     - parameter username: (path) Name of user. 
     - parameter targetUser: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersUsernameFollowingTargetUserGetWithRequestBuilder(username: String, targetUser: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/following/{targetUser}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let targetUserPreEscape = "\(targetUser)"
        let targetUserPostEscape = targetUserPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{targetUser}", with: targetUserPostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        usersUsernameGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{username}
     - Get a single user.
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func usersUsernameGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Users> {
        var path = "/users/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Users>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameGistsGet(username: String, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gists?,_ error: Error?) -> Void)) {
        usersUsernameGistsGetWithRequestBuilder(username: username, since: since, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{username}/gists
     - List a users gists.
     - parameter username: (path) Name of user. 
     - parameter since: (query) The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Example: \&quot;2012-10-09T23:39:01Z\&quot;.  (optional)
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gists> 
     */
    open class func usersUsernameGistsGetWithRequestBuilder(username: String, since: String? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gists> {
        var path = "/users/{username}/gists"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gists>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameKeysGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gitignore?,_ error: Error?) -> Void)) {
        usersUsernameKeysGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{username}/keys
     - List public keys for a user. Lists the verified public keys for a user. This is accessible by anyone. 
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gitignore> 
     */
    open class func usersUsernameKeysGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gitignore> {
        var path = "/users/{username}/keys"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gitignore>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameOrgsGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Gitignore?,_ error: Error?) -> Void)) {
        usersUsernameOrgsGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{username}/orgs
     - List all public organizations for a user.
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Gitignore> 
     */
    open class func usersUsernameOrgsGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Gitignore> {
        var path = "/users/{username}/orgs"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Gitignore>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameReceivedEventsGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersUsernameReceivedEventsGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /users/{username}/received_events
     - These are events that you'll only see public events.
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersUsernameReceivedEventsGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/received_events"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameReceivedEventsPublicGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersUsernameReceivedEventsPublicGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /users/{username}/received_events/public
     - List public events that a user has received
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersUsernameReceivedEventsPublicGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/received_events/public"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_usersUsernameReposGet: String {
        case all = "all"
        case _public = "public"
        case _private = "private"
        case forks = "forks"
        case sources = "sources"
        case member = "member"
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter type: (query)  (optional, default to "all")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameReposGet(username: String, type: ModelType_usersUsernameReposGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Repos?,_ error: Error?) -> Void)) {
        usersUsernameReposGetWithRequestBuilder(username: username, type: type, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{username}/repos
     - List public repositories for the specified user.
     - parameter username: (path) Name of user. 
     - parameter type: (query)  (optional, default to "all")
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Repos> 
     */
    open class func usersUsernameReposGetWithRequestBuilder(username: String, type: ModelType_usersUsernameReposGet? = nil, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Repos> {
        var path = "/users/{username}/repos"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repos>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameStarredGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersUsernameStarredGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /users/{username}/starred
     - List repositories being starred by a user.
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersUsernameStarredGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/starred"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUsernameSubscriptionsGet(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersUsernameSubscriptionsGetWithRequestBuilder(username: username, xGitHubMediaType: xGitHubMediaType, accept: accept, xRateLimitLimit: xRateLimitLimit, xRateLimitRemaining: xRateLimitRemaining, xRateLimitReset: xRateLimitReset, xGitHubRequestId: xGitHubRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /users/{username}/subscriptions
     - List repositories being watched by a user.
     - parameter username: (path) Name of user. 
     - parameter xGitHubMediaType: (header) You can check the current version of media type in responses.  (optional)
     - parameter accept: (header) Is used to set specified media type. (optional)
     - parameter xRateLimitLimit: (header)  (optional)
     - parameter xRateLimitRemaining: (header)  (optional)
     - parameter xRateLimitReset: (header)  (optional)
     - parameter xGitHubRequestId: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func usersUsernameSubscriptionsGetWithRequestBuilder(username: String, xGitHubMediaType: String? = nil, accept: String? = nil, xRateLimitLimit: Int? = nil, xRateLimitRemaining: Int? = nil, xRateLimitReset: Int? = nil, xGitHubRequestId: Int? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/subscriptions"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubAPIGeneratedAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-GitHub-Media-Type": xGitHubMediaType,
            "Accept": accept,
            "X-RateLimit-Limit": xRateLimitLimit?.encodeToJSON(),
            "X-RateLimit-Remaining": xRateLimitRemaining?.encodeToJSON(),
            "X-RateLimit-Reset": xRateLimitReset?.encodeToJSON(),
            "X-GitHub-Request-Id": xGitHubRequestId?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = GitHubAPIGeneratedAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
