//
// Fork.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct Fork: Codable {

    public var cloneUrl: String?
    /** ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ */
    public var createdAt: String?
    public var _description: String?
    public var fork: Bool?
    public var forks: Int?
    public var forksCount: Int?
    public var fullName: String?
    public var gitUrl: String?
    public var homepage: String?
    public var htmlUrl: String?
    public var _id: Int?
    public var language: String?
    public var masterBranch: String?
    public var mirrorUrl: String?
    public var name: String?
    public var openIssues: Int?
    public var openIssuesCount: Int?
    public var owner: Any?
    public var _private: Bool?
    /** ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ */
    public var pushedAt: String?
    public var size: Int?
    public var sshUrl: String?
    public var svnUrl: String?
    /** ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ */
    public var updatedAt: String?
    public var url: String?
    public var watchers: Int?
    public var watchersCount: Int?

    public init(cloneUrl: String?, createdAt: String?, _description: String?, fork: Bool?, forks: Int?, forksCount: Int?, fullName: String?, gitUrl: String?, homepage: String?, htmlUrl: String?, _id: Int?, language: String?, masterBranch: String?, mirrorUrl: String?, name: String?, openIssues: Int?, openIssuesCount: Int?, owner: Any?, _private: Bool?, pushedAt: String?, size: Int?, sshUrl: String?, svnUrl: String?, updatedAt: String?, url: String?, watchers: Int?, watchersCount: Int?) {
        self.cloneUrl = cloneUrl
        self.createdAt = createdAt
        self._description = _description
        self.fork = fork
        self.forks = forks
        self.forksCount = forksCount
        self.fullName = fullName
        self.gitUrl = gitUrl
        self.homepage = homepage
        self.htmlUrl = htmlUrl
        self._id = _id
        self.language = language
        self.masterBranch = masterBranch
        self.mirrorUrl = mirrorUrl
        self.name = name
        self.openIssues = openIssues
        self.openIssuesCount = openIssuesCount
        self.owner = owner
        self._private = _private
        self.pushedAt = pushedAt
        self.size = size
        self.sshUrl = sshUrl
        self.svnUrl = svnUrl
        self.updatedAt = updatedAt
        self.url = url
        self.watchers = watchers
        self.watchersCount = watchersCount
    }

    public enum CodingKeys: String, CodingKey { 
        case cloneUrl = "clone_url"
        case createdAt = "created_at"
        case _description = "description"
        case fork
        case forks
        case forksCount = "forks_count"
        case fullName = "full_name"
        case gitUrl = "git_url"
        case homepage
        case htmlUrl = "html_url"
        case _id = "id"
        case language
        case masterBranch = "master_branch"
        case mirrorUrl = "mirror_url"
        case name
        case openIssues = "open_issues"
        case openIssuesCount = "open_issues_count"
        case owner
        case _private = "private"
        case pushedAt = "pushed_at"
        case size
        case sshUrl = "ssh_url"
        case svnUrl = "svn_url"
        case updatedAt = "updated_at"
        case url
        case watchers
        case watchersCount = "watchers_count"
    }


}

